// Generated by @wagmi/cli@1.3.0 on 8/25/2023 at 12:48:54 PM

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DemoLobby
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const demoLobbyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingReveal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'shareKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingShuffle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerLeft',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerReady',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerRevealedSeat',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'position', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'PlayerSeated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerShuffledSeats',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'table', internalType: 'address', type: 'address', indexed: false },
      { name: 'players', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'TableStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cardConfig',
    outputs: [
      { name: 'm', internalType: 'uint8', type: 'uint8' },
      { name: 'n', internalType: 'uint8', type: 'uint8' },
      { name: 'param', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'positionCounts', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'createTable',
    outputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'cardFaces', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerPlaying',
    outputs: [
      { name: 'playing', internalType: 'bool', type: 'bool' },
      { name: 'lastTableId', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerWaiting',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: 'waitingPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'join',
    outputs: [{ name: 'joined', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'leave',
    outputs: [{ name: 'refund', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'ready',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'removeTable',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'player', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'reportPlayerLeft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'reportTableEnded',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'revealed', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'revealSeats',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'helper', internalType: 'address', type: 'address' }],
    name: 'setHelper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'readyTimeout', internalType: 'uint32', type: 'uint32' }],
    name: 'setReadyTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revealTimeout', internalType: 'uint32', type: 'uint32' }],
    name: 'setRevealTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'shuffleTimeout', internalType: 'uint32', type: 'uint32' }],
    name: 'setShuffleTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'table', internalType: 'contract IPokerTable', type: 'address' },
    ],
    name: 'setTable',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'table', internalType: 'address', type: 'address' }],
    name: 'setTableFactory',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tablePlayTime', internalType: 'uint32', type: 'uint32' }],
    name: 'setTablePlayTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleSeats',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tableExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tablePlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tables',
    outputs: [
      {
        name: '',
        internalType: 'struct ILobby.Table[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint32', type: 'uint32' },
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          {
            name: 'waitings',
            internalType: 'struct ILobby.Waiting[]',
            type: 'tuple[]',
            components: [
              { name: 'player', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'config',
            internalType: 'struct MentalPokerHelper.Config',
            type: 'tuple',
            components: [
              { name: 'm', internalType: 'uint8', type: 'uint8' },
              { name: 'n', internalType: 'uint8', type: 'uint8' },
              { name: 'param', internalType: 'bytes', type: 'bytes' },
              { name: 'items', internalType: 'bytes[]', type: 'bytes[]' },
            ],
          },
          {
            name: 'pendingAction',
            internalType: 'struct ILobby.PendingAction',
            type: 'tuple',
            components: [
              { name: 'act', internalType: 'enum ILobby.PendingActionType', type: 'uint8' },
              { name: 'users', internalType: 'address[]', type: 'address[]' },
              { name: 'timeout', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DemoTable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const demoTableABI = [
  { type: 'error', inputs: [], name: 'ACT' },
  {
    type: 'error',
    inputs: [
      { name: 'requiredBalance', internalType: 'uint256', type: 'uint256' },
      { name: 'actualBalance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'BALANCE',
  },
  { type: 'error', inputs: [], name: 'ChipError' },
  { type: 'error', inputs: [], name: 'ChipForbidden' },
  {
    type: 'error',
    inputs: [
      { name: 'current', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'PLAYER',
  },
  {
    type: 'error',
    inputs: [
      { name: 'stage', internalType: 'enum ITexasHoldemTable.GameStage', type: 'uint8' },
      { name: 'action', internalType: 'enum TexasHoldemActions', type: 'uint8' },
    ],
    name: 'STAGE',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TABLE_TIMEOUT',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'allinBets', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'bets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'burnCards',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.PokerCard[]',
        type: 'tuple[]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'buyin',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'callBets', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'cashOut', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'checkBets', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'claimPots',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityCards',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.PokerCard[]',
        type: 'tuple[]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'cutCards', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'foldBets', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'forceNewGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'forceStopGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'game',
    outputs: [
      {
        name: 'currentGame',
        internalType: 'struct ITexasHoldemTable.TexasHoldemGame',
        type: 'tuple',
        components: [
          { name: 'stage', internalType: 'enum ITexasHoldemTable.GameStage', type: 'uint8' },
          { name: 'minRaise', internalType: 'uint256', type: 'uint256' },
          { name: 'betAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'actingPosition', internalType: 'uint8', type: 'uint8' },
          { name: 'actingTimeout', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBigBlind',
    outputs: [
      { name: 'player', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pos', internalType: 'uint8', type: 'uint8' }],
    name: 'getPositionHandRanking',
    outputs: [
      { name: 'ranking', internalType: 'enum HandRanking', type: 'uint8' },
      { name: 'kickers', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSmallBlind',
    outputs: [
      { name: 'player', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint8', type: 'uint8' },
      { name: 'revealToken', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'holeCards',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.PokerCard[]',
        type: 'tuple[]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'info',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Info',
        type: 'tuple',
        components: [
          { name: 'tableId', internalType: 'uint32', type: 'uint32' },
          { name: 'subject', internalType: 'string', type: 'string' },
          { name: 'lobby', internalType: 'address', type: 'address' },
          { name: 'gameType', internalType: 'enum IPokerTable.GameType', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'initialBuyin', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isPlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'message',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'players',
        internalType: 'struct IPokerTable.Player[]',
        type: 'tuple[]',
        components: [
          { name: 'wallet', internalType: 'address', type: 'address' },
          { name: 'name', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'newTable',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'playerCounts',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pid', internalType: 'uint8', type: 'uint8' }],
    name: 'position',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Position',
        type: 'tuple',
        components: [
          { name: 'pid', internalType: 'uint8', type: 'uint8' },
          {
            name: 'player',
            internalType: 'struct IPokerTable.Player',
            type: 'tuple',
            components: [
              { name: 'wallet', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
            ],
          },
          { name: 'bets', internalType: 'uint256', type: 'uint256' },
          { name: 'chips', internalType: 'uint256', type: 'uint256' },
          { name: 'pendingBuyin', internalType: 'uint256', type: 'uint256' },
          { name: 'leftAt', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'position', internalType: 'uint8', type: 'uint8' }],
    name: 'positionStatus',
    outputs: [
      { name: 'status', internalType: 'enum ITexasHoldemTable.PlayerStatus', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'raiseAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'raiseBets',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'subject', internalType: 'string', type: 'string' },
      { name: 'seats', internalType: 'uint8', type: 'uint8' },
      { name: 'bbAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sbAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'anteAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'initialBuyin', internalType: 'uint256', type: 'uint256' },
      { name: 'helper', internalType: 'address', type: 'address' },
      { name: 'cardFaces', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'setup',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'showCards', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPots',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TexasHoldemHelper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const texasHoldemHelperABI = [
  { type: 'error', inputs: [], name: 'InvalidSignature' },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cards',
        internalType: 'struct IPokerTable.PokerCard[7]',
        type: 'tuple[7]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
    name: 'bestHand',
    outputs: [
      { name: 'ranking', internalType: 'enum HandRanking', type: 'uint8' },
      { name: 'kickers', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cards',
        internalType: 'struct IPokerTable.PokerCard[5]',
        type: 'tuple[5]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
    name: 'getHandRanking',
    outputs: [
      { name: 'ranking', internalType: 'enum HandRanking', type: 'uint8' },
      { name: 'kickers', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'salt', internalType: 'string', type: 'string' },
    ],
    name: 'parseSigner',
    outputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TexasHoldemPeriphery
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const texasHoldemPeripheryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'table', internalType: 'address', type: 'address' },
      { name: 'revealToken', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_tableStatus',
    outputs: [
      {
        name: 'status',
        internalType: 'struct TableStatus',
        type: 'tuple',
        components: [
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'subject', internalType: 'string', type: 'string' },
          { name: 'stage', internalType: 'enum ITexasHoldemTable.GameStage', type: 'uint8' },
          {
            name: 'communityCards',
            internalType: 'struct IPokerTable.PokerCard[]',
            type: 'tuple[]',
            components: [
              { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
              { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
            ],
          },
          {
            name: 'burnCards',
            internalType: 'struct IPokerTable.PokerCard[]',
            type: 'tuple[]',
            components: [
              { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
              { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
            ],
          },
          {
            name: 'positions',
            internalType: 'struct TablePosition[]',
            type: 'tuple[]',
            components: [
              { name: 'pid', internalType: 'uint8', type: 'uint8' },
              { name: 'wallet', internalType: 'address', type: 'address' },
              { name: 'displayName', internalType: 'string', type: 'string' },
              {
                name: 'status',
                internalType: 'enum ITexasHoldemTable.PlayerStatus',
                type: 'uint8',
              },
              {
                name: 'holeCards',
                internalType: 'struct IPokerTable.PokerCard[]',
                type: 'tuple[]',
                components: [
                  { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
                  { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
                ],
              },
              { name: 'bets', internalType: 'uint256', type: 'uint256' },
              { name: 'chips', internalType: 'uint256', type: 'uint256' },
              { name: 'pendingBuyin', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'minRaise', internalType: 'uint256', type: 'uint256' },
          { name: 'betAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'actingPosition', internalType: 'uint8', type: 'uint8' },
          { name: 'actingTimeout', internalType: 'uint32', type: 'uint32' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_lobby', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lobby',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lobbyTables',
    outputs: [
      {
        name: 'tables',
        internalType: 'struct ILobby.Table[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint32', type: 'uint32' },
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          {
            name: 'waitings',
            internalType: 'struct ILobby.Waiting[]',
            type: 'tuple[]',
            components: [
              { name: 'player', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'config',
            internalType: 'struct MentalPokerHelper.Config',
            type: 'tuple',
            components: [
              { name: 'm', internalType: 'uint8', type: 'uint8' },
              { name: 'n', internalType: 'uint8', type: 'uint8' },
              { name: 'param', internalType: 'bytes', type: 'bytes' },
              { name: 'items', internalType: 'bytes[]', type: 'bytes[]' },
            ],
          },
          {
            name: 'pendingAction',
            internalType: 'struct ILobby.PendingAction',
            type: 'tuple',
            components: [
              { name: 'act', internalType: 'enum ILobby.PendingActionType', type: 'uint8' },
              { name: 'users', internalType: 'address[]', type: 'address[]' },
              { name: 'timeout', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'table', internalType: 'address', type: 'address' },
      { name: 'revealToken', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tableByAddress',
    outputs: [
      {
        name: 'status',
        internalType: 'struct TableStatus',
        type: 'tuple',
        components: [
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'subject', internalType: 'string', type: 'string' },
          { name: 'stage', internalType: 'enum ITexasHoldemTable.GameStage', type: 'uint8' },
          {
            name: 'communityCards',
            internalType: 'struct IPokerTable.PokerCard[]',
            type: 'tuple[]',
            components: [
              { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
              { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
            ],
          },
          {
            name: 'burnCards',
            internalType: 'struct IPokerTable.PokerCard[]',
            type: 'tuple[]',
            components: [
              { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
              { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
            ],
          },
          {
            name: 'positions',
            internalType: 'struct TablePosition[]',
            type: 'tuple[]',
            components: [
              { name: 'pid', internalType: 'uint8', type: 'uint8' },
              { name: 'wallet', internalType: 'address', type: 'address' },
              { name: 'displayName', internalType: 'string', type: 'string' },
              {
                name: 'status',
                internalType: 'enum ITexasHoldemTable.PlayerStatus',
                type: 'uint8',
              },
              {
                name: 'holeCards',
                internalType: 'struct IPokerTable.PokerCard[]',
                type: 'tuple[]',
                components: [
                  { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
                  { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
                ],
              },
              { name: 'bets', internalType: 'uint256', type: 'uint256' },
              { name: 'chips', internalType: 'uint256', type: 'uint256' },
              { name: 'pendingBuyin', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'minRaise', internalType: 'uint256', type: 'uint256' },
          { name: 'betAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'actingPosition', internalType: 'uint8', type: 'uint8' },
          { name: 'actingTimeout', internalType: 'uint32', type: 'uint32' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint8', type: 'uint8' },
      { name: 'revealToken', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tableByIndex',
    outputs: [
      {
        name: 'status',
        internalType: 'struct TableStatus',
        type: 'tuple',
        components: [
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'subject', internalType: 'string', type: 'string' },
          { name: 'stage', internalType: 'enum ITexasHoldemTable.GameStage', type: 'uint8' },
          {
            name: 'communityCards',
            internalType: 'struct IPokerTable.PokerCard[]',
            type: 'tuple[]',
            components: [
              { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
              { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
            ],
          },
          {
            name: 'burnCards',
            internalType: 'struct IPokerTable.PokerCard[]',
            type: 'tuple[]',
            components: [
              { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
              { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
            ],
          },
          {
            name: 'positions',
            internalType: 'struct TablePosition[]',
            type: 'tuple[]',
            components: [
              { name: 'pid', internalType: 'uint8', type: 'uint8' },
              { name: 'wallet', internalType: 'address', type: 'address' },
              { name: 'displayName', internalType: 'string', type: 'string' },
              {
                name: 'status',
                internalType: 'enum ITexasHoldemTable.PlayerStatus',
                type: 'uint8',
              },
              {
                name: 'holeCards',
                internalType: 'struct IPokerTable.PokerCard[]',
                type: 'tuple[]',
                components: [
                  { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
                  { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
                ],
              },
              { name: 'bets', internalType: 'uint256', type: 'uint256' },
              { name: 'chips', internalType: 'uint256', type: 'uint256' },
              { name: 'pendingBuyin', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'minRaise', internalType: 'uint256', type: 'uint256' },
          { name: 'betAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'actingPosition', internalType: 'uint8', type: 'uint8' },
          { name: 'actingTimeout', internalType: 'uint32', type: 'uint32' },
          { name: 'timestamp', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ZkGameLobby
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const zkGameLobbyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingReveal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'shareKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingShuffle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerLeft',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerReady',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerRevealedSeat',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'position', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'PlayerSeated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerShuffledSeats',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'table', internalType: 'address', type: 'address', indexed: false },
      { name: 'players', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'TableStarted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TEXAS_HOLDEM_TABLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cardConfig',
    outputs: [
      { name: 'm', internalType: 'uint8', type: 'uint8' },
      { name: 'n', internalType: 'uint8', type: 'uint8' },
      { name: 'param', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'posCounts', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'createTable',
    outputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerPlaying',
    outputs: [
      { name: 'playing', internalType: 'bool', type: 'bool' },
      { name: 'lastTableId', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerWaiting',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'player', internalType: 'bytes', type: 'bytes' },
      { name: 'waitingPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'waitingKeyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'join',
    outputs: [{ name: 'joined', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'player', internalType: 'address', type: 'address' },
    ],
    name: 'kick',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'leave',
    outputs: [{ name: 'refund', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'ready',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'removeTable',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'player', internalType: 'address', type: 'address' },
      { name: 'totalGames', internalType: 'uint256', type: 'uint256' },
      { name: 'totalBet', internalType: 'uint256', type: 'uint256' },
      { name: 'totalEarned', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'reportPlayerLeft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'reportTableEnded',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'tokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'revealSeats',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
      { name: 'table', internalType: 'address', type: 'address' },
    ],
    name: 'setDefinition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'index', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'show',
    outputs: [
      { name: 'revealed', internalType: 'bytes', type: 'bytes' },
      { name: 'sealeds', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'publics', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'shuffled', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleSeats',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tableExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tablePlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tables',
    outputs: [
      {
        name: '',
        internalType: 'struct ILobby.Table[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint32', type: 'uint32' },
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          {
            name: 'waitings',
            internalType: 'struct ILobby.Waiting[]',
            type: 'tuple[]',
            components: [
              { name: 'player', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'config',
            internalType: 'struct MentalPokerHelper.Config',
            type: 'tuple',
            components: [
              { name: 'm', internalType: 'uint8', type: 'uint8' },
              { name: 'n', internalType: 'uint8', type: 'uint8' },
              { name: 'param', internalType: 'bytes', type: 'bytes' },
              { name: 'items', internalType: 'bytes[]', type: 'bytes[]' },
            ],
          },
          {
            name: 'pendingAction',
            internalType: 'struct ILobby.PendingAction',
            type: 'tuple',
            components: [
              { name: 'act', internalType: 'enum ILobby.PendingActionType', type: 'uint8' },
              { name: 'users', internalType: 'address[]', type: 'address[]' },
              { name: 'timeout', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Cloner
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const clonerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'cloneIt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'last',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'results',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dev
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const devABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'RATE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'buyout',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'a', internalType: 'uint8', type: 'uint8' },
      { name: 'b', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'sum',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dummy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'data',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'd', internalType: 'bytes', type: 'bytes' }],
    name: 'set',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RandSeat
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const randSeatABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'positions', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: '_hashToCard',
    outputs: [
      { name: 'face', internalType: 'bytes', type: 'bytes' },
      { name: 'back', internalType: 'bytes', type: 'bytes' },
      { name: 'order', internalType: 'uint8', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: '_joiners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_params',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: '_positions',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: '_publicKeys',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: '_shuffledDecks',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentDeck',
    outputs: [{ name: 'deck', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'hashedCards',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'info',
    outputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'positions', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'bytes', type: 'bytes' }],
    name: 'join',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'maskThem', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maskedCards',
    outputs: [{ name: 'cards', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'openedCards',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poker',
    outputs: [{ name: '', internalType: 'contract IMentalPoker', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharedKey',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleThem',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicall
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicallABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicall2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicall2ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall2.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall2.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall2.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall2.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall2.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall2.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall2.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1967Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1967UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICashman
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCashmanABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'chipAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'buyIn',
    outputs: [{ name: 'cashAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'chipAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'cashOut',
    outputs: [
      { name: 'cashAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'exceed', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILobby
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLobbyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingReveal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'shareKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingShuffle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerLeft',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerReady',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerRevealedSeat',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'position', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'PlayerSeated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerShuffledSeats',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'table', internalType: 'address', type: 'address', indexed: false },
      { name: 'players', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'TableStarted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerPlaying',
    outputs: [
      { name: 'playing', internalType: 'bool', type: 'bool' },
      { name: 'lastTableId', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerWaiting',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'player', internalType: 'bytes', type: 'bytes' },
      { name: 'seatDrawingPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'waitingKeyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'join',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'leave',
    outputs: [{ name: 'refund', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'ready',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'player', internalType: 'address', type: 'address' },
      { name: 'totalGames', internalType: 'uint256', type: 'uint256' },
      { name: 'totalBet', internalType: 'uint256', type: 'uint256' },
      { name: 'totalEarned', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'reportPlayerLeft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'reportTableEnded',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'tokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'revealSeats',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'shuffled', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleSeats',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tableExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tablePlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tables',
    outputs: [
      {
        name: '',
        internalType: 'struct ILobby.Table[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint32', type: 'uint32' },
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          {
            name: 'waitings',
            internalType: 'struct ILobby.Waiting[]',
            type: 'tuple[]',
            components: [
              { name: 'player', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'config',
            internalType: 'struct MentalPokerHelper.Config',
            type: 'tuple',
            components: [
              { name: 'm', internalType: 'uint8', type: 'uint8' },
              { name: 'n', internalType: 'uint8', type: 'uint8' },
              { name: 'param', internalType: 'bytes', type: 'bytes' },
              { name: 'items', internalType: 'bytes[]', type: 'bytes[]' },
            ],
          },
          {
            name: 'pendingAction',
            internalType: 'struct ILobby.PendingAction',
            type: 'tuple',
            components: [
              { name: 'act', internalType: 'enum ILobby.PendingActionType', type: 'uint8' },
              { name: 'users', internalType: 'address[]', type: 'address[]' },
              { name: 'timeout', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPokerTable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPokerTableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'info',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Info',
        type: 'tuple',
        components: [
          { name: 'tableId', internalType: 'uint32', type: 'uint32' },
          { name: 'subject', internalType: 'string', type: 'string' },
          { name: 'lobby', internalType: 'address', type: 'address' },
          { name: 'gameType', internalType: 'enum IPokerTable.GameType', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'initialBuyin', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isPlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'players',
        internalType: 'struct IPokerTable.Player[]',
        type: 'tuple[]',
        components: [
          { name: 'wallet', internalType: 'address', type: 'address' },
          { name: 'name', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'newTable',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pid', internalType: 'uint8', type: 'uint8' }],
    name: 'position',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Position',
        type: 'tuple',
        components: [
          { name: 'pid', internalType: 'uint8', type: 'uint8' },
          {
            name: 'player',
            internalType: 'struct IPokerTable.Player',
            type: 'tuple',
            components: [
              { name: 'wallet', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
            ],
          },
          { name: 'bets', internalType: 'uint256', type: 'uint256' },
          { name: 'chips', internalType: 'uint256', type: 'uint256' },
          { name: 'pendingBuyin', internalType: 'uint256', type: 'uint256' },
          { name: 'leftAt', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPots',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITexasHoldemHelper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTexasHoldemHelperABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cards',
        internalType: 'struct IPokerTable.PokerCard[7]',
        type: 'tuple[7]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
    name: 'bestHand',
    outputs: [
      { name: 'ranking', internalType: 'enum HandRanking', type: 'uint8' },
      { name: 'kickers', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'cards',
        internalType: 'struct IPokerTable.PokerCard[5]',
        type: 'tuple[5]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
    name: 'getHandRanking',
    outputs: [
      { name: 'ranking', internalType: 'enum HandRanking', type: 'uint8' },
      { name: 'kickers', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'salt', internalType: 'string', type: 'string' },
    ],
    name: 'parseSigner',
    outputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITexasHoldemTable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTexasHoldemTableABI = [
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'allinBets', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'burnCards',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.PokerCard[]',
        type: 'tuple[]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'buyin',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'callBets', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'cashOut', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'checkBets', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'claimPots',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'communityCards',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.PokerCard[]',
        type: 'tuple[]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'cutCards', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'foldBets', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'forceNewGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'forceStopGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'game',
    outputs: [
      {
        name: 'currentGame',
        internalType: 'struct ITexasHoldemTable.TexasHoldemGame',
        type: 'tuple',
        components: [
          { name: 'stage', internalType: 'enum ITexasHoldemTable.GameStage', type: 'uint8' },
          { name: 'minRaise', internalType: 'uint256', type: 'uint256' },
          { name: 'betAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'actingPosition', internalType: 'uint8', type: 'uint8' },
          { name: 'actingTimeout', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint8', type: 'uint8' },
      { name: 'revealToken', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'holeCards',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.PokerCard[]',
        type: 'tuple[]',
        components: [
          { name: 'suit', internalType: 'enum IPokerTable.PokerSuit', type: 'uint8' },
          { name: 'rank', internalType: 'enum IPokerTable.PokerRank', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'info',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Info',
        type: 'tuple',
        components: [
          { name: 'tableId', internalType: 'uint32', type: 'uint32' },
          { name: 'subject', internalType: 'string', type: 'string' },
          { name: 'lobby', internalType: 'address', type: 'address' },
          { name: 'gameType', internalType: 'enum IPokerTable.GameType', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'initialBuyin', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isPlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'message',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'players',
        internalType: 'struct IPokerTable.Player[]',
        type: 'tuple[]',
        components: [
          { name: 'wallet', internalType: 'address', type: 'address' },
          { name: 'name', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'newTable',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pid', internalType: 'uint8', type: 'uint8' }],
    name: 'position',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Position',
        type: 'tuple',
        components: [
          { name: 'pid', internalType: 'uint8', type: 'uint8' },
          {
            name: 'player',
            internalType: 'struct IPokerTable.Player',
            type: 'tuple',
            components: [
              { name: 'wallet', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
            ],
          },
          { name: 'bets', internalType: 'uint256', type: 'uint256' },
          { name: 'chips', internalType: 'uint256', type: 'uint256' },
          { name: 'pendingBuyin', internalType: 'uint256', type: 'uint256' },
          { name: 'leftAt', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint8', type: 'uint8' }],
    name: 'positionStatus',
    outputs: [
      { name: 'status', internalType: 'enum ITexasHoldemTable.PlayerStatus', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'raiseAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'raiseBets',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'subject', internalType: 'string', type: 'string' },
      { name: 'seats', internalType: 'uint8', type: 'uint8' },
      { name: 'bbAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sbAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'anteAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'initialBuyin', internalType: 'uint256', type: 'uint256' },
      { name: 'helper', internalType: 'address', type: 'address' },
      { name: 'cardIds', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'setup',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'showCards', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPots',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Cashman
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cashmanABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'chipAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'buyIn',
    outputs: [{ name: 'cashAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'chipAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'cashOut',
    outputs: [
      { name: 'cashAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'exceed', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GameLobby
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gameLobbyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingReveal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'seats', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'shareKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'timeout', internalType: 'uint32', type: 'uint32', indexed: false },
    ],
    name: 'PendingShuffle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerLeft',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerReady',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerRevealedSeat',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'position', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'PlayerSeated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'PlayerShuffledSeats',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'table', internalType: 'address', type: 'address', indexed: false },
      { name: 'players', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'TableStarted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerPlaying',
    outputs: [
      { name: 'playing', internalType: 'bool', type: 'bool' },
      { name: 'lastTableId', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'isPlayerWaiting',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'player', internalType: 'bytes', type: 'bytes' },
      { name: 'waitingPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'waitingKeyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'join',
    outputs: [{ name: 'joined', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'player', internalType: 'address', type: 'address' },
    ],
    name: 'kick',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'leave',
    outputs: [{ name: 'refund', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'ready',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'player', internalType: 'address', type: 'address' },
      { name: 'totalGames', internalType: 'uint256', type: 'uint256' },
      { name: 'totalBet', internalType: 'uint256', type: 'uint256' },
      { name: 'totalEarned', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'reportPlayerLeft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'reportTableEnded',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'tokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'revealSeats',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'index', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'show',
    outputs: [
      { name: 'revealed', internalType: 'bytes', type: 'bytes' },
      { name: 'sealeds', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'publics', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tableId', internalType: 'uint32', type: 'uint32' },
      { name: 'shuffled', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleSeats',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tableExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tableId', internalType: 'uint32', type: 'uint32' }],
    name: 'tablePlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tables',
    outputs: [
      {
        name: '',
        internalType: 'struct ILobby.Table[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint32', type: 'uint32' },
          { name: 'table', internalType: 'address', type: 'address' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          {
            name: 'waitings',
            internalType: 'struct ILobby.Waiting[]',
            type: 'tuple[]',
            components: [
              { name: 'player', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'publicKey', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'config',
            internalType: 'struct MentalPokerHelper.Config',
            type: 'tuple',
            components: [
              { name: 'm', internalType: 'uint8', type: 'uint8' },
              { name: 'n', internalType: 'uint8', type: 'uint8' },
              { name: 'param', internalType: 'bytes', type: 'bytes' },
              { name: 'items', internalType: 'bytes[]', type: 'bytes[]' },
            ],
          },
          {
            name: 'pendingAction',
            internalType: 'struct ILobby.PendingAction',
            type: 'tuple',
            components: [
              { name: 'act', internalType: 'enum ILobby.PendingActionType', type: 'uint8' },
              { name: 'users', internalType: 'address[]', type: 'address[]' },
              { name: 'timeout', internalType: 'uint32', type: 'uint32' },
            ],
          },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PokerTable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pokerTableABI = [
  { type: 'error', inputs: [], name: 'ChipError' },
  { type: 'error', inputs: [], name: 'ChipForbidden' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TABLE_TIMEOUT',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'player', internalType: 'address', type: 'address' }],
    name: 'bets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'info',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Info',
        type: 'tuple',
        components: [
          { name: 'tableId', internalType: 'uint32', type: 'uint32' },
          { name: 'subject', internalType: 'string', type: 'string' },
          { name: 'lobby', internalType: 'address', type: 'address' },
          { name: 'gameType', internalType: 'enum IPokerTable.GameType', type: 'uint8' },
          { name: 'status', internalType: 'enum IPokerTable.TableStatus', type: 'uint8' },
          { name: 'seats', internalType: 'uint8', type: 'uint8' },
          { name: 'initialBuyin', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isPlaying',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'players',
        internalType: 'struct IPokerTable.Player[]',
        type: 'tuple[]',
        components: [
          { name: 'wallet', internalType: 'address', type: 'address' },
          { name: 'name', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'newTable',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'playerCounts',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pid', internalType: 'uint8', type: 'uint8' }],
    name: 'position',
    outputs: [
      {
        name: '',
        internalType: 'struct IPokerTable.Position',
        type: 'tuple',
        components: [
          { name: 'pid', internalType: 'uint8', type: 'uint8' },
          {
            name: 'player',
            internalType: 'struct IPokerTable.Player',
            type: 'tuple',
            components: [
              { name: 'wallet', internalType: 'address', type: 'address' },
              { name: 'name', internalType: 'string', type: 'string' },
            ],
          },
          { name: 'bets', internalType: 'uint256', type: 'uint256' },
          { name: 'chips', internalType: 'uint256', type: 'uint256' },
          { name: 'pendingBuyin', internalType: 'uint256', type: 'uint256' },
          { name: 'leftAt', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPots',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TableChip
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tableChipABI = [
  { type: 'error', inputs: [], name: 'ChipError' },
  { type: 'error', inputs: [], name: 'ChipForbidden' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GameInstance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gameInstanceABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_controller', internalType: 'address', type: 'address' },
      { name: '_poker', internalType: 'address', type: 'address' },
      { name: '_params', internalType: 'bytes', type: 'bytes' },
      {
        name: '_deck',
        internalType: 'struct IGameInstance.AnyCard[]',
        type: 'tuple[]',
        components: [
          { name: '_encoded', internalType: 'bytes', type: 'bytes' },
          { name: '_masked', internalType: 'bytes', type: 'bytes' },
          { name: '_playingCardID', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_numPlayers', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'pubKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'memo', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'player', internalType: 'address', type: 'address', indexed: true }],
    name: 'PlayerLeft',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'shuffledDeck', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
    ],
    name: 'PlayerShuffledDeck',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'indexes', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'hashes', internalType: 'bytes32[]', type: 'bytes32[]', indexed: false },
    ],
    name: 'RevealedCards',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NONE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_revealMine', internalType: 'bool', type: 'bool' },
      { name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'addRevealTokens',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'addrList',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'addrToPlayers',
    outputs: [
      { name: '_acc', internalType: 'address', type: 'address' },
      { name: '_key', internalType: 'bytes', type: 'bytes' },
      { name: '_memo', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '_card', internalType: 'bytes', type: 'bytes' }],
    name: 'cardHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'controller',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentDeck',
    outputs: [{ name: 'cards', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'deck',
    outputs: [
      { name: '_encoded', internalType: 'bytes', type: 'bytes' },
      { name: '_masked', internalType: 'bytes', type: 'bytes' },
      { name: '_playingCardID', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'getPlayer',
    outputs: [
      {
        name: '',
        internalType: 'struct IGameInstance.Player',
        type: 'tuple',
        components: [
          { name: '_acc', internalType: 'address', type: 'address' },
          { name: '_key', internalType: 'bytes', type: 'bytes' },
          { name: '_memo', internalType: 'bytes', type: 'bytes' },
          { name: '_cards', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getRevealTokens',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'hashToMaskedCards',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'hashToPlayingCards',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'hashedCards',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFull',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'isOpen',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isPlayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'isUsed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_pubKey', internalType: 'bytes', type: 'bytes' },
      { name: '_memo', internalType: 'bytes', type: 'bytes' },
      { name: '_keyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'joinGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_player', internalType: 'address', type: 'address' }],
    name: 'leaveGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numJoinedPlayers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numPlayers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numUsed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numUsedCards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'openedCards',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'params',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'players',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'playingCard',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poker',
    outputs: [{ name: '', internalType: 'contract IMentalPoker', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'readyToReveal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_params', internalType: 'bytes', type: 'bytes' },
      { name: '_numPlayers', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'resetGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revealTokens',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'setUsed',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharedKey',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_shuffledDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleDeck',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tableFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'usedCards',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OneTimeDrawInstance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const oneTimeDrawInstanceABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_controller', internalType: 'address', type: 'address' },
      { name: '_poker', internalType: 'address', type: 'address' },
      { name: '_params', internalType: 'bytes', type: 'bytes' },
      {
        name: '_deck',
        internalType: 'struct IGameInstance.AnyCard[]',
        type: 'tuple[]',
        components: [
          { name: '_encoded', internalType: 'bytes', type: 'bytes' },
          { name: '_masked', internalType: 'bytes', type: 'bytes' },
          { name: '_playingCardID', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_numPlayers', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'cards', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'PlayerDrewCards',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'pubKey', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'memo', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'PlayerJoined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'player', internalType: 'address', type: 'address', indexed: true }],
    name: 'PlayerLeft',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'shuffledDeck', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
    ],
    name: 'PlayerShuffledDeck',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'indexes', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'hashes', internalType: 'bytes32[]', type: 'bytes32[]', indexed: false },
    ],
    name: 'RevealedCards',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NONE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_revealMine', internalType: 'bool', type: 'bool' },
      { name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'addRevealTokens',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'addrList',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'addrToPlayers',
    outputs: [
      { name: '_acc', internalType: 'address', type: 'address' },
      { name: '_key', internalType: 'bytes', type: 'bytes' },
      { name: '_memo', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '_card', internalType: 'bytes', type: 'bytes' }],
    name: 'cardHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'controller',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentDeck',
    outputs: [{ name: 'cards', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'deck',
    outputs: [
      { name: '_encoded', internalType: 'bytes', type: 'bytes' },
      { name: '_masked', internalType: 'bytes', type: 'bytes' },
      { name: '_playingCardID', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_myIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_othersIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'drawCardsNSubmitRevealTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_unrevealedIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'foldCards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'getPlayer',
    outputs: [
      {
        name: '',
        internalType: 'struct IGameInstance.Player',
        type: 'tuple',
        components: [
          { name: '_acc', internalType: 'address', type: 'address' },
          { name: '_key', internalType: 'bytes', type: 'bytes' },
          { name: '_memo', internalType: 'bytes', type: 'bytes' },
          { name: '_cards', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getRevealTokens',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'hashToMaskedCards',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'hashToPlayingCards',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'hashedCards',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFull',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'isOpen',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isPlayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'isUsed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_pubKey', internalType: 'bytes', type: 'bytes' },
      { name: '_memo', internalType: 'bytes', type: 'bytes' },
      { name: '_keyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'joinGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_player', internalType: 'address', type: 'address' }],
    name: 'leaveGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numJoinedPlayers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numPlayers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numUsed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numUsedCards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'openedCards',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'params',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'players',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'playingCard',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poker',
    outputs: [{ name: '', internalType: 'contract IMentalPoker', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'readyToReveal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_params', internalType: 'bytes', type: 'bytes' },
      { name: '_numPlayers', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'resetGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revealTokens',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'setUsed',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharedKey',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'showHand',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_shuffledDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleDeck',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tableFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'usedCards',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGameInstance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGameInstanceABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_revealMine', internalType: 'bool', type: 'bool' },
      { name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'addRevealTokens',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '_card', internalType: 'bytes', type: 'bytes' }],
    name: 'cardHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'getPlayer',
    outputs: [
      {
        name: '',
        internalType: 'struct IGameInstance.Player',
        type: 'tuple',
        components: [
          { name: '_acc', internalType: 'address', type: 'address' },
          { name: '_key', internalType: 'bytes', type: 'bytes' },
          { name: '_memo', internalType: 'bytes', type: 'bytes' },
          { name: '_cards', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getRevealTokens',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFull',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'isOpen',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isPlayer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'isUsed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_pubKey', internalType: 'bytes', type: 'bytes' },
      { name: '_memo', internalType: 'bytes', type: 'bytes' },
      { name: '_keyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'joinGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_player', internalType: 'address', type: 'address' }],
    name: 'leaveGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numUsed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'players',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'playingCard',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'readyToReveal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_params', internalType: 'bytes', type: 'bytes' },
      { name: '_numPlayers', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'resetGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'setUsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_shuffledDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleDeck',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMentalPoker
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMentalPokerABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'pubKeys', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'computeAggregateKey',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'sharedKey', internalType: 'bytes', type: 'bytes' },
      { name: 'encoded', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mask',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'masked', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'reveal',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'param1', internalType: 'bytes', type: 'bytes' },
      { name: 'param2', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'test',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'pubKey', internalType: 'bytes', type: 'bytes' },
      { name: 'memo', internalType: 'bytes', type: 'bytes' },
      { name: 'keyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyKeyOwnership',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'pubKey', internalType: 'bytes', type: 'bytes' },
      { name: 'revealToken', internalType: 'bytes', type: 'bytes' },
      { name: 'masked', internalType: 'bytes', type: 'bytes' },
      { name: 'revealProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyReveal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'sharedKey', internalType: 'bytes', type: 'bytes' },
      { name: 'curDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'newDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyShuffle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOneTimeDraw
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOneTimeDrawABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'cards', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'PlayerDrewCards',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_myIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_othersIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'drawCardsNSubmitRevealTokens',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_unrevealedIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'foldCards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_player', internalType: 'address', type: 'address' },
      { name: '_cardIndexes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'showHand',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MentalPokerTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mentalPokerTestABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_mentalPokerAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pubKeys', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'computeAggregateKey',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'sharedKey', internalType: 'bytes', type: 'bytes' },
      { name: 'encoded', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mask',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'masked', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'reveal',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'param1', internalType: 'bytes', type: 'bytes' },
      { name: 'param2', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'test',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'pubKey', internalType: 'bytes', type: 'bytes' },
      { name: 'memo', internalType: 'bytes', type: 'bytes' },
      { name: 'keyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyKeyOwnership',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'pubKey', internalType: 'bytes', type: 'bytes' },
      { name: 'revealToken', internalType: 'bytes', type: 'bytes' },
      { name: 'masked', internalType: 'bytes', type: 'bytes' },
      { name: 'revealProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyReveal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'sharedKey', internalType: 'bytes', type: 'bytes' },
      { name: 'curDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'newDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyShuffle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TexasHoldemRound
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const texasHoldemRoundABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_tableFee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BetBigBlind',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BetSmallBlind',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'player', internalType: 'address', type: 'address', indexed: true }],
    name: 'ButtonPicked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'winner', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GameEnded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'blame', internalType: 'address', type: 'address', indexed: true },
      { name: 'fine', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GameTimeout',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PlayerCalled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PlayerChecked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'player', internalType: 'address', type: 'address', indexed: true }],
    name: 'PlayerFolded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PlayerRaised',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'player', internalType: 'address', type: 'address', indexed: true },
      { name: 'cards', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'PlayerShowed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BIG_BLIND',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'COMMISSION',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MIN_RAISE',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SMALL_BLIND',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TIMEOUT_ACT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'bigBlindBet', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'button',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'calls', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'check', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'deadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'drawCards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'flipCards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'fold',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'game',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_pubKey', internalType: 'bytes', type: 'bytes' },
      { name: '_memo', internalType: 'bytes', type: 'bytes' },
      { name: '_keyProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'joinGame',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'leaveGame', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_randFeed', internalType: 'uint256', type: 'uint256' }],
    name: 'pickButton',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'player2Act',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_player', internalType: 'address', type: 'address' }],
    name: 'playerBet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'playerBets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'playerDone',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'playerRemain',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'players',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_other', internalType: 'address', type: 'address' }],
    name: 'purgePlayer',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'raise', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_params', internalType: 'bytes', type: 'bytes' },
      { name: '_numPlayers', internalType: 'uint256', type: 'uint256' },
      { name: '_tableFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'resetGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gameInstance', internalType: 'address', type: 'address' }],
    name: 'setGameInstance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_revealTokens', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_revealProofs', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'showdown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_shuffledDeck', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_shuffleProof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'shuffleDeck',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'smallBlindBet', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'status',
    outputs: [{ name: '', internalType: 'enum TexasHoldemRound.GameStatus', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tableFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'whoRaised',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'whoShowed',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'winner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const
