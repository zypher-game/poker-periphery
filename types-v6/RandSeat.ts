/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RandSeatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_hashToCard"
      | "_joiners"
      | "_params"
      | "_positions"
      | "_publicKeys"
      | "_shuffledDecks"
      | "currentDeck"
      | "hashedCards"
      | "info"
      | "join"
      | "maskThem"
      | "maskedCards"
      | "openedCards"
      | "poker"
      | "sharedKey"
      | "shuffleThem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_hashToCard",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_joiners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_publicKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_shuffledDecks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDeck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashedCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "join", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "maskThem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maskedCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openedCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poker", values?: undefined): string;
  encodeFunctionData(functionFragment: "sharedKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shuffleThem",
    values: [BytesLike[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_hashToCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_joiners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_publicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_shuffledDecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maskThem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maskedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharedKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shuffleThem",
    data: BytesLike
  ): Result;
}

export interface RandSeat extends BaseContract {
  connect(runner?: ContractRunner | null): RandSeat;
  waitForDeployment(): Promise<this>;

  interface: RandSeatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _hashToCard: TypedContractMethod<
    [arg0: BytesLike],
    [[string, string, bigint] & { face: string; back: string; order: bigint }],
    "view"
  >;

  _joiners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  _params: TypedContractMethod<[], [string], "view">;

  _positions: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  _publicKeys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  _shuffledDecks: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  currentDeck: TypedContractMethod<[], [string[]], "view">;

  hashedCards: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  info: TypedContractMethod<
    [],
    [[string, string[]] & { params: string; positions: string[] }],
    "view"
  >;

  join: TypedContractMethod<[key: BytesLike], [void], "nonpayable">;

  maskThem: TypedContractMethod<[], [void], "nonpayable">;

  maskedCards: TypedContractMethod<[], [string[]], "view">;

  openedCards: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  poker: TypedContractMethod<[], [string], "view">;

  sharedKey: TypedContractMethod<[], [string], "view">;

  shuffleThem: TypedContractMethod<
    [newDeck: BytesLike[], proof: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_hashToCard"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[string, string, bigint] & { face: string; back: string; order: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "_joiners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_positions"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "_publicKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "_shuffledDecks"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentDeck"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hashedCards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "info"
  ): TypedContractMethod<
    [],
    [[string, string[]] & { params: string; positions: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maskThem"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maskedCards"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "openedCards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "poker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sharedKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "shuffleThem"
  ): TypedContractMethod<
    [newDeck: BytesLike[], proof: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
