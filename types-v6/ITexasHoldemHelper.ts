/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPokerTable {
  export type PokerCardStruct = { suit: BigNumberish; rank: BigNumberish };

  export type PokerCardStructOutput = [suit: bigint, rank: bigint] & {
    suit: bigint;
    rank: bigint;
  };
}

export interface ITexasHoldemHelperInterface extends Interface {
  getFunction(
    nameOrSignature: "bestHand" | "getHandRanking" | "parseSigner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bestHand",
    values: [IPokerTable.PokerCardStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandRanking",
    values: [
      [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSigner",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "bestHand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHandRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSigner",
    data: BytesLike
  ): Result;
}

export interface ITexasHoldemHelper extends BaseContract {
  connect(runner?: ContractRunner | null): ITexasHoldemHelper;
  waitForDeployment(): Promise<this>;

  interface: ITexasHoldemHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bestHand: TypedContractMethod<
    [cards: IPokerTable.PokerCardStruct[]],
    [[bigint, bigint] & { ranking: bigint; kickers: bigint }],
    "view"
  >;

  getHandRanking: TypedContractMethod<
    [
      cards: [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ]
    ],
    [[bigint, bigint] & { ranking: bigint; kickers: bigint }],
    "view"
  >;

  parseSigner: TypedContractMethod<
    [signature: BytesLike, salt: string],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bestHand"
  ): TypedContractMethod<
    [cards: IPokerTable.PokerCardStruct[]],
    [[bigint, bigint] & { ranking: bigint; kickers: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHandRanking"
  ): TypedContractMethod<
    [
      cards: [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ]
    ],
    [[bigint, bigint] & { ranking: bigint; kickers: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseSigner"
  ): TypedContractMethod<
    [signature: BytesLike, salt: string],
    [string],
    "view"
  >;

  filters: {};
}
