/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { IMentalPoker, IMentalPokerInterface } from "../IMentalPoker";

const _abi = [
  "function computeAggregateKey(bytes[]) pure returns (bytes)",
  "function mask(bytes,bytes,bytes) pure returns (bytes)",
  "function reveal(bytes[],bytes) pure returns (bytes)",
  "function test(bytes,bytes[]) view returns (bytes)",
  "function verifyKeyOwnership(bytes,bytes,bytes,bytes) pure returns (bool)",
  "function verifyReveal(bytes,bytes,bytes,bytes,bytes) pure returns (bool)",
  "function verifyShuffle(bytes,bytes,bytes[],bytes[],bytes) pure returns (bool)",
] as const;

export class IMentalPoker__factory {
  static readonly abi = _abi;
  static createInterface(): IMentalPokerInterface {
    return new Interface(_abi) as IMentalPokerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMentalPoker {
    return new Contract(address, _abi, runner) as unknown as IMentalPoker;
  }
}
