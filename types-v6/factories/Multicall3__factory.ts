/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { Multicall3, Multicall3Interface } from "../Multicall3";

const _abi = [
  "function aggregate(tuple(address,bytes)[]) payable returns (uint256, bytes[])",
  "function aggregate3(tuple(address,bool,bytes)[]) payable returns (tuple(bool,bytes)[])",
  "function aggregate3Value(tuple(address,bool,uint256,bytes)[]) payable returns (tuple(bool,bytes)[])",
  "function blockAndAggregate(tuple(address,bytes)[]) payable returns (uint256, bytes32, tuple(bool,bytes)[])",
  "function getBasefee() view returns (uint256)",
  "function getBlockHash(uint256) view returns (bytes32)",
  "function getBlockNumber() view returns (uint256)",
  "function getChainId() view returns (uint256)",
  "function getCurrentBlockCoinbase() view returns (address)",
  "function getCurrentBlockDifficulty() view returns (uint256)",
  "function getCurrentBlockGasLimit() view returns (uint256)",
  "function getCurrentBlockTimestamp() view returns (uint256)",
  "function getEthBalance(address) view returns (uint256)",
  "function getLastBlockHash() view returns (bytes32)",
  "function tryAggregate(bool,tuple(address,bytes)[]) payable returns (tuple(bool,bytes)[])",
  "function tryBlockAndAggregate(bool,tuple(address,bytes)[]) payable returns (uint256, bytes32, tuple(bool,bytes)[])",
] as const;

export class Multicall3__factory {
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new Interface(_abi) as Multicall3Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): Multicall3 {
    return new Contract(address, _abi, runner) as unknown as Multicall3;
  }
}
