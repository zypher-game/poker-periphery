/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IGameInstance {
  export type AnyCardStruct = {
    _encoded: BytesLike;
    _masked: BytesLike;
    _playingCardID: string;
  };

  export type AnyCardStructOutput = [
    _encoded: string,
    _masked: string,
    _playingCardID: string
  ] & { _encoded: string; _masked: string; _playingCardID: string };

  export type PlayerStruct = {
    _acc: AddressLike;
    _key: BytesLike;
    _memo: BytesLike;
    _cards: BigNumberish[];
  };

  export type PlayerStructOutput = [
    _acc: string,
    _key: string,
    _memo: string,
    _cards: bigint[]
  ] & { _acc: string; _key: string; _memo: string; _cards: bigint[] };
}

export interface OneTimeDrawInstanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NONE"
      | "addRevealTokens"
      | "addrList"
      | "addrToPlayers"
      | "cardHash"
      | "controller"
      | "currentDeck"
      | "deck"
      | "drawCardsNSubmitRevealTokens"
      | "foldCards"
      | "getPlayer"
      | "getRevealTokens"
      | "hashToMaskedCards"
      | "hashToPlayingCards"
      | "hashedCards"
      | "isFull"
      | "isOpen"
      | "isPlayer"
      | "isUsed"
      | "joinGame"
      | "leaveGame"
      | "numJoinedPlayers"
      | "numPlayers"
      | "numUsed"
      | "numUsedCards"
      | "openedCards"
      | "params"
      | "players"
      | "playingCard"
      | "poker"
      | "readyToReveal"
      | "resetGame"
      | "revealTokens"
      | "setUsed"
      | "sharedKey"
      | "showHand"
      | "shuffleDeck"
      | "tableFee"
      | "usedCards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PlayerDrewCards"
      | "PlayerJoined"
      | "PlayerLeft"
      | "PlayerShuffledDeck"
      | "RevealedCards"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRevealTokens",
    values: [AddressLike, boolean, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addrList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addrToPlayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cardHash", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDeck",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deck", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "drawCardsNSubmitRevealTokens",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "foldCards",
    values: [AddressLike, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToMaskedCards",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToPlayingCards",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashedCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isFull", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numJoinedPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numUsed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numUsedCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openedCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(functionFragment: "players", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playingCard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readyToReveal",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "resetGame",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsed",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "sharedKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "showHand",
    values: [AddressLike, BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffleDeck",
    values: [AddressLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tableFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usedCards",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRevealTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addrList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addrToPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cardHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawCardsNSubmitRevealTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "foldCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRevealTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToMaskedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToPlayingCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFull", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numJoinedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numUsedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playingCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readyToReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharedKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "showHand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shuffleDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tableFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usedCards", data: BytesLike): Result;
}

export namespace PlayerDrewCardsEvent {
  export type InputTuple = [player: AddressLike, cards: BigNumberish[]];
  export type OutputTuple = [player: string, cards: bigint[]];
  export interface OutputObject {
    player: string;
    cards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [
    player: AddressLike,
    pubKey: BytesLike,
    memo: BytesLike
  ];
  export type OutputTuple = [player: string, pubKey: string, memo: string];
  export interface OutputObject {
    player: string;
    pubKey: string;
    memo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerLeftEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerShuffledDeckEvent {
  export type InputTuple = [player: AddressLike, shuffledDeck: BytesLike[]];
  export type OutputTuple = [player: string, shuffledDeck: string[]];
  export interface OutputObject {
    player: string;
    shuffledDeck: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevealedCardsEvent {
  export type InputTuple = [indexes: BigNumberish[], hashes: BytesLike[]];
  export type OutputTuple = [indexes: bigint[], hashes: string[]];
  export interface OutputObject {
    indexes: bigint[];
    hashes: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OneTimeDrawInstance extends BaseContract {
  connect(runner?: ContractRunner | null): OneTimeDrawInstance;
  waitForDeployment(): Promise<this>;

  interface: OneTimeDrawInstanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NONE: TypedContractMethod<[], [string], "view">;

  addRevealTokens: TypedContractMethod<
    [
      _player: AddressLike,
      _revealMine: boolean,
      _cardIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  addrList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addrToPlayers: TypedContractMethod<
    [arg0: AddressLike],
    [[string, string, string] & { _acc: string; _key: string; _memo: string }],
    "view"
  >;

  cardHash: TypedContractMethod<[_card: BytesLike], [string], "view">;

  controller: TypedContractMethod<[], [string], "view">;

  currentDeck: TypedContractMethod<[], [string[]], "view">;

  deck: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string] & {
        _encoded: string;
        _masked: string;
        _playingCardID: string;
      }
    ],
    "view"
  >;

  drawCardsNSubmitRevealTokens: TypedContractMethod<
    [
      _player: AddressLike,
      _myIndexes: BigNumberish[],
      _othersIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  foldCards: TypedContractMethod<
    [
      _player: AddressLike,
      _unrevealedIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getPlayer: TypedContractMethod<
    [_account: AddressLike],
    [IGameInstance.PlayerStructOutput],
    "view"
  >;

  getRevealTokens: TypedContractMethod<
    [_cardIndex: BigNumberish],
    [string[]],
    "view"
  >;

  hashToMaskedCards: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  hashToPlayingCards: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  hashedCards: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  isFull: TypedContractMethod<[], [boolean], "view">;

  isOpen: TypedContractMethod<[_cardIndex: BigNumberish], [boolean], "view">;

  isPlayer: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  isUsed: TypedContractMethod<[_cardIndex: BigNumberish], [boolean], "view">;

  joinGame: TypedContractMethod<
    [
      _player: AddressLike,
      _pubKey: BytesLike,
      _memo: BytesLike,
      _keyProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  leaveGame: TypedContractMethod<[_player: AddressLike], [void], "nonpayable">;

  numJoinedPlayers: TypedContractMethod<[], [bigint], "view">;

  numPlayers: TypedContractMethod<[], [bigint], "view">;

  numUsed: TypedContractMethod<[], [bigint], "view">;

  numUsedCards: TypedContractMethod<[], [bigint], "view">;

  openedCards: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  params: TypedContractMethod<[], [string], "view">;

  players: TypedContractMethod<[], [string[]], "view">;

  playingCard: TypedContractMethod<
    [_cardIndex: BigNumberish],
    [string],
    "view"
  >;

  poker: TypedContractMethod<[], [string], "view">;

  readyToReveal: TypedContractMethod<
    [_cardIndexes: BigNumberish[]],
    [boolean],
    "view"
  >;

  resetGame: TypedContractMethod<
    [_params: BytesLike, _numPlayers: BigNumberish],
    [void],
    "nonpayable"
  >;

  revealTokens: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  setUsed: TypedContractMethod<
    [_cardIndexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  sharedKey: TypedContractMethod<[], [string], "view">;

  showHand: TypedContractMethod<
    [
      _player: AddressLike,
      _cardIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  shuffleDeck: TypedContractMethod<
    [
      _player: AddressLike,
      _shuffledDeck: BytesLike[],
      _shuffleProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  tableFee: TypedContractMethod<[], [bigint], "view">;

  usedCards: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NONE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addRevealTokens"
  ): TypedContractMethod<
    [
      _player: AddressLike,
      _revealMine: boolean,
      _cardIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addrList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addrToPlayers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, string, string] & { _acc: string; _key: string; _memo: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "cardHash"
  ): TypedContractMethod<[_card: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentDeck"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "deck"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string] & {
        _encoded: string;
        _masked: string;
        _playingCardID: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "drawCardsNSubmitRevealTokens"
  ): TypedContractMethod<
    [
      _player: AddressLike,
      _myIndexes: BigNumberish[],
      _othersIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "foldCards"
  ): TypedContractMethod<
    [
      _player: AddressLike,
      _unrevealedIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [_account: AddressLike],
    [IGameInstance.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRevealTokens"
  ): TypedContractMethod<[_cardIndex: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "hashToMaskedCards"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "hashToPlayingCards"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "hashedCards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isFull"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOpen"
  ): TypedContractMethod<[_cardIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlayer"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUsed"
  ): TypedContractMethod<[_cardIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [
      _player: AddressLike,
      _pubKey: BytesLike,
      _memo: BytesLike,
      _keyProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leaveGame"
  ): TypedContractMethod<[_player: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "numJoinedPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numUsed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numUsedCards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openedCards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "playingCard"
  ): TypedContractMethod<[_cardIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "poker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readyToReveal"
  ): TypedContractMethod<[_cardIndexes: BigNumberish[]], [boolean], "view">;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<
    [_params: BytesLike, _numPlayers: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revealTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setUsed"
  ): TypedContractMethod<[_cardIndexes: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sharedKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "showHand"
  ): TypedContractMethod<
    [
      _player: AddressLike,
      _cardIndexes: BigNumberish[],
      _revealTokens: BytesLike[],
      _revealProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shuffleDeck"
  ): TypedContractMethod<
    [
      _player: AddressLike,
      _shuffledDeck: BytesLike[],
      _shuffleProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tableFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usedCards"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  getEvent(
    key: "PlayerDrewCards"
  ): TypedContractEvent<
    PlayerDrewCardsEvent.InputTuple,
    PlayerDrewCardsEvent.OutputTuple,
    PlayerDrewCardsEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerLeft"
  ): TypedContractEvent<
    PlayerLeftEvent.InputTuple,
    PlayerLeftEvent.OutputTuple,
    PlayerLeftEvent.OutputObject
  >;
  getEvent(
    key: "PlayerShuffledDeck"
  ): TypedContractEvent<
    PlayerShuffledDeckEvent.InputTuple,
    PlayerShuffledDeckEvent.OutputTuple,
    PlayerShuffledDeckEvent.OutputObject
  >;
  getEvent(
    key: "RevealedCards"
  ): TypedContractEvent<
    RevealedCardsEvent.InputTuple,
    RevealedCardsEvent.OutputTuple,
    RevealedCardsEvent.OutputObject
  >;

  filters: {
    "PlayerDrewCards(address,uint256[])": TypedContractEvent<
      PlayerDrewCardsEvent.InputTuple,
      PlayerDrewCardsEvent.OutputTuple,
      PlayerDrewCardsEvent.OutputObject
    >;
    PlayerDrewCards: TypedContractEvent<
      PlayerDrewCardsEvent.InputTuple,
      PlayerDrewCardsEvent.OutputTuple,
      PlayerDrewCardsEvent.OutputObject
    >;

    "PlayerJoined(address,bytes,bytes)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "PlayerLeft(address)": TypedContractEvent<
      PlayerLeftEvent.InputTuple,
      PlayerLeftEvent.OutputTuple,
      PlayerLeftEvent.OutputObject
    >;
    PlayerLeft: TypedContractEvent<
      PlayerLeftEvent.InputTuple,
      PlayerLeftEvent.OutputTuple,
      PlayerLeftEvent.OutputObject
    >;

    "PlayerShuffledDeck(address,bytes[])": TypedContractEvent<
      PlayerShuffledDeckEvent.InputTuple,
      PlayerShuffledDeckEvent.OutputTuple,
      PlayerShuffledDeckEvent.OutputObject
    >;
    PlayerShuffledDeck: TypedContractEvent<
      PlayerShuffledDeckEvent.InputTuple,
      PlayerShuffledDeckEvent.OutputTuple,
      PlayerShuffledDeckEvent.OutputObject
    >;

    "RevealedCards(uint256[],bytes32[])": TypedContractEvent<
      RevealedCardsEvent.InputTuple,
      RevealedCardsEvent.OutputTuple,
      RevealedCardsEvent.OutputObject
    >;
    RevealedCards: TypedContractEvent<
      RevealedCardsEvent.InputTuple,
      RevealedCardsEvent.OutputTuple,
      RevealedCardsEvent.OutputObject
    >;
  };
}
