/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPokerTable {
  export type PokerCardStruct = { suit: BigNumberish; rank: BigNumberish };

  export type PokerCardStructOutput = [suit: bigint, rank: bigint] & {
    suit: bigint;
    rank: bigint;
  };

  export type InfoStruct = {
    tableId: BigNumberish;
    subject: string;
    lobby: AddressLike;
    gameType: BigNumberish;
    status: BigNumberish;
    seats: BigNumberish;
    initialBuyin: BigNumberish;
  };

  export type InfoStructOutput = [
    tableId: bigint,
    subject: string,
    lobby: string,
    gameType: bigint,
    status: bigint,
    seats: bigint,
    initialBuyin: bigint
  ] & {
    tableId: bigint;
    subject: string;
    lobby: string;
    gameType: bigint;
    status: bigint;
    seats: bigint;
    initialBuyin: bigint;
  };

  export type PlayerStruct = { wallet: AddressLike; name: string };

  export type PlayerStructOutput = [wallet: string, name: string] & {
    wallet: string;
    name: string;
  };

  export type PositionStruct = {
    pid: BigNumberish;
    player: IPokerTable.PlayerStruct;
    bets: BigNumberish;
    chips: BigNumberish;
    leftAt: BigNumberish;
  };

  export type PositionStructOutput = [
    pid: bigint,
    player: IPokerTable.PlayerStructOutput,
    bets: bigint,
    chips: bigint,
    leftAt: bigint
  ] & {
    pid: bigint;
    player: IPokerTable.PlayerStructOutput;
    bets: bigint;
    chips: bigint;
    leftAt: bigint;
  };
}

export declare namespace ITexasHoldemTable {
  export type TexasHoldemGameStruct = {
    gameId: BigNumberish;
    stage: BigNumberish;
    minRaise: BigNumberish;
    betAmount: BigNumberish;
    lastStageBet: BigNumberish;
    actingPosition: BigNumberish;
    actingTimeout: BigNumberish;
  };

  export type TexasHoldemGameStructOutput = [
    gameId: bigint,
    stage: bigint,
    minRaise: bigint,
    betAmount: bigint,
    lastStageBet: bigint,
    actingPosition: bigint,
    actingTimeout: bigint
  ] & {
    gameId: bigint;
    stage: bigint;
    minRaise: bigint;
    betAmount: bigint;
    lastStageBet: bigint;
    actingPosition: bigint;
    actingTimeout: bigint;
  };

  export type PotStruct = { amount: BigNumberish; positions: BigNumberish[] };

  export type PotStructOutput = [amount: bigint, positions: bigint[]] & {
    amount: bigint;
    positions: bigint[];
  };

  export type GameTimerStruct = {
    initialTimeout: BigNumberish;
    betTimeout: BigNumberish;
    showdownTimeout: BigNumberish;
    endTimeout: BigNumberish;
  };

  export type GameTimerStructOutput = [
    initialTimeout: bigint,
    betTimeout: bigint,
    showdownTimeout: bigint,
    endTimeout: bigint
  ] & {
    initialTimeout: bigint;
    betTimeout: bigint;
    showdownTimeout: bigint;
    endTimeout: bigint;
  };
}

export interface DemoTableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TABLE_TIMEOUT"
      | "activePlayerCounts"
      | "allinBets"
      | "balanceOf"
      | "bets"
      | "callBets"
      | "cashOut"
      | "checkBets"
      | "claimPots"
      | "communityCards"
      | "cutCards"
      | "decimals"
      | "foldBets"
      | "forceNewGame"
      | "forceStopGame"
      | "game"
      | "getBigBlind"
      | "getSmallBlind"
      | "holeCards"
      | "info"
      | "isPlaying"
      | "message"
      | "name"
      | "newTable"
      | "owner"
      | "playerCounts"
      | "position"
      | "positionStatus"
      | "pots"
      | "raiseBets"
      | "setup"
      | "showCards"
      | "symbol"
      | "timer"
      | "totalPots"
      | "totalSupply"
      | "transferOwnership"
      | "winner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Bet"
      | "GameStarted"
      | "Initialized"
      | "OwnershipTransferred"
      | "ShowdownResult"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TABLE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePlayerCounts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allinBets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bets", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "callBets", values?: undefined): string;
  encodeFunctionData(functionFragment: "cashOut", values?: undefined): string;
  encodeFunctionData(functionFragment: "checkBets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimPots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "communityCards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cutCards", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "foldBets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceNewGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceStopGame",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "game", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBigBlind",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSmallBlind",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holeCards",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPlaying", values?: undefined): string;
  encodeFunctionData(functionFragment: "message", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newTable",
    values: [IPokerTable.PlayerStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "position",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pots", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raiseBets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "showCards", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "timer", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalPots", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winner",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "TABLE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePlayerCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allinBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cashOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimPots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "communityCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cutCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foldBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceNewGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceStopGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBigBlind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmallBlind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holeCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPlaying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raiseBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "showCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace BetEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    stage: BigNumberish,
    position: BigNumberish,
    option: BigNumberish,
    callAmount: BigNumberish,
    raiseAmount: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    stage: bigint,
    position: bigint,
    option: bigint,
    callAmount: bigint,
    raiseAmount: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    stage: bigint;
    position: bigint;
    option: bigint;
    callAmount: bigint;
    raiseAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [tableId: BigNumberish, gameId: BigNumberish];
  export type OutputTuple = [tableId: bigint, gameId: bigint];
  export interface OutputObject {
    tableId: bigint;
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShowdownResultEvent {
  export type InputTuple = [
    player: AddressLike,
    handRank: BigNumberish,
    kickers: BigNumberish
  ];
  export type OutputTuple = [player: string, handRank: bigint, kickers: bigint];
  export interface OutputObject {
    player: string;
    handRank: bigint;
    kickers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DemoTable extends BaseContract {
  connect(runner?: ContractRunner | null): DemoTable;
  waitForDeployment(): Promise<this>;

  interface: DemoTableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TABLE_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  activePlayerCounts: TypedContractMethod<[], [bigint], "view">;

  allinBets: TypedContractMethod<[], [void], "nonpayable">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bets: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  callBets: TypedContractMethod<[], [void], "nonpayable">;

  cashOut: TypedContractMethod<[], [void], "nonpayable">;

  checkBets: TypedContractMethod<[], [void], "nonpayable">;

  claimPots: TypedContractMethod<[pos: BigNumberish], [bigint], "nonpayable">;

  communityCards: TypedContractMethod<
    [],
    [IPokerTable.PokerCardStructOutput[]],
    "view"
  >;

  cutCards: TypedContractMethod<[], [void], "nonpayable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  foldBets: TypedContractMethod<[], [void], "nonpayable">;

  forceNewGame: TypedContractMethod<[], [void], "nonpayable">;

  forceStopGame: TypedContractMethod<[], [void], "nonpayable">;

  game: TypedContractMethod<
    [],
    [ITexasHoldemTable.TexasHoldemGameStructOutput],
    "view"
  >;

  getBigBlind: TypedContractMethod<
    [],
    [[string, bigint] & { player: string; amount: bigint }],
    "view"
  >;

  getSmallBlind: TypedContractMethod<
    [],
    [[string, bigint] & { player: string; amount: bigint }],
    "view"
  >;

  holeCards: TypedContractMethod<
    [positionId: BigNumberish, revealToken: BytesLike],
    [IPokerTable.PokerCardStructOutput[]],
    "view"
  >;

  info: TypedContractMethod<[], [IPokerTable.InfoStructOutput], "view">;

  isPlaying: TypedContractMethod<[], [boolean], "view">;

  message: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  newTable: TypedContractMethod<
    [players: IPokerTable.PlayerStruct[]],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  playerCounts: TypedContractMethod<[], [bigint], "view">;

  position: TypedContractMethod<
    [pid: BigNumberish],
    [IPokerTable.PositionStructOutput],
    "view"
  >;

  positionStatus: TypedContractMethod<
    [position: BigNumberish],
    [bigint],
    "view"
  >;

  pots: TypedContractMethod<[], [ITexasHoldemTable.PotStructOutput[]], "view">;

  raiseBets: TypedContractMethod<
    [raiseAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setup: TypedContractMethod<
    [
      tableId: BigNumberish,
      subject: string,
      seats: BigNumberish,
      bbAmount: BigNumberish,
      sbAmount: BigNumberish,
      anteAmount: BigNumberish,
      initialBuyin: BigNumberish,
      helper: AddressLike,
      cardFaces: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  showCards: TypedContractMethod<[], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  timer: TypedContractMethod<
    [],
    [ITexasHoldemTable.GameTimerStructOutput],
    "view"
  >;

  totalPots: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  winner: TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint[], bigint, bigint] & {
        positions: bigint[];
        ranking: bigint;
        kickers: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TABLE_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activePlayerCounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allinBets"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bets"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "callBets"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cashOut"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkBets"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimPots"
  ): TypedContractMethod<[pos: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "communityCards"
  ): TypedContractMethod<[], [IPokerTable.PokerCardStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "cutCards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "foldBets"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceNewGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceStopGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "game"
  ): TypedContractMethod<
    [],
    [ITexasHoldemTable.TexasHoldemGameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBigBlind"
  ): TypedContractMethod<
    [],
    [[string, bigint] & { player: string; amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSmallBlind"
  ): TypedContractMethod<
    [],
    [[string, bigint] & { player: string; amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "holeCards"
  ): TypedContractMethod<
    [positionId: BigNumberish, revealToken: BytesLike],
    [IPokerTable.PokerCardStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "info"
  ): TypedContractMethod<[], [IPokerTable.InfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "isPlaying"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "message"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newTable"
  ): TypedContractMethod<
    [players: IPokerTable.PlayerStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerCounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "position"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [IPokerTable.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "positionStatus"
  ): TypedContractMethod<[position: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pots"
  ): TypedContractMethod<[], [ITexasHoldemTable.PotStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "raiseBets"
  ): TypedContractMethod<[raiseAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setup"
  ): TypedContractMethod<
    [
      tableId: BigNumberish,
      subject: string,
      seats: BigNumberish,
      bbAmount: BigNumberish,
      sbAmount: BigNumberish,
      anteAmount: BigNumberish,
      initialBuyin: BigNumberish,
      helper: AddressLike,
      cardFaces: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "showCards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timer"
  ): TypedContractMethod<[], [ITexasHoldemTable.GameTimerStructOutput], "view">;
  getFunction(
    nameOrSignature: "totalPots"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint[], bigint, bigint] & {
        positions: bigint[];
        ranking: bigint;
        kickers: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Bet"
  ): TypedContractEvent<
    BetEvent.InputTuple,
    BetEvent.OutputTuple,
    BetEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ShowdownResult"
  ): TypedContractEvent<
    ShowdownResultEvent.InputTuple,
    ShowdownResultEvent.OutputTuple,
    ShowdownResultEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Bet(uint64,uint8,uint8,uint8,uint256,uint256)": TypedContractEvent<
      BetEvent.InputTuple,
      BetEvent.OutputTuple,
      BetEvent.OutputObject
    >;
    Bet: TypedContractEvent<
      BetEvent.InputTuple,
      BetEvent.OutputTuple,
      BetEvent.OutputObject
    >;

    "GameStarted(uint32,uint64)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ShowdownResult(address,uint8,uint64)": TypedContractEvent<
      ShowdownResultEvent.InputTuple,
      ShowdownResultEvent.OutputTuple,
      ShowdownResultEvent.OutputObject
    >;
    ShowdownResult: TypedContractEvent<
      ShowdownResultEvent.InputTuple,
      ShowdownResultEvent.OutputTuple,
      ShowdownResultEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
