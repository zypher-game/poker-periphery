/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TexasHoldemRoundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BIG_BLIND"
      | "COMMISSION"
      | "DEFAULT_ADMIN_ROLE"
      | "MIN_RAISE"
      | "SMALL_BLIND"
      | "TIMEOUT_ACT"
      | "bigBlindBet"
      | "button"
      | "calls"
      | "check"
      | "deadline"
      | "drawCards"
      | "flipCards"
      | "fold"
      | "game"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "joinGame"
      | "leaveGame"
      | "pickButton"
      | "player2Act"
      | "playerBet"
      | "playerBets"
      | "playerDone"
      | "playerRemain"
      | "players"
      | "pot"
      | "purgePlayer"
      | "raise"
      | "renounceRole"
      | "resetGame"
      | "revokeRole"
      | "setGameInstance"
      | "showdown"
      | "shuffleDeck"
      | "smallBlindBet"
      | "status"
      | "supportsInterface"
      | "tableFee"
      | "whoRaised"
      | "whoShowed"
      | "winner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetBigBlind"
      | "BetSmallBlind"
      | "ButtonPicked"
      | "GameEnded"
      | "GameTimeout"
      | "PlayerCalled"
      | "PlayerChecked"
      | "PlayerFolded"
      | "PlayerRaised"
      | "PlayerShowed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BIG_BLIND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "COMMISSION",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_RAISE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SMALL_BLIND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIMEOUT_ACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBlindBet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "button", values?: undefined): string;
  encodeFunctionData(functionFragment: "calls", values?: undefined): string;
  encodeFunctionData(functionFragment: "check", values?: undefined): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drawCards",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flipCards",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fold",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "game", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "leaveGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pickButton",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "player2Act",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerBet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerBets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerDone",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerRemain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purgePlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "raise", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetGame",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameInstance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "showdown",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffleDeck",
    values: [BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "smallBlindBet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tableFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "whoRaised", values?: undefined): string;
  encodeFunctionData(functionFragment: "whoShowed", values?: undefined): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BIG_BLIND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "COMMISSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_RAISE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SMALL_BLIND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIMEOUT_ACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBlindBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "button", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flipCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pickButton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player2Act", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerDone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerRemain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purgePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGameInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "showdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shuffleDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smallBlindBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tableFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whoRaised", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whoShowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace BetBigBlindEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetSmallBlindEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ButtonPickedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameTimeoutEvent {
  export type InputTuple = [blame: AddressLike, fine: BigNumberish];
  export type OutputTuple = [blame: string, fine: bigint];
  export interface OutputObject {
    blame: string;
    fine: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerCalledEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerCheckedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerFoldedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRaisedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerShowedEvent {
  export type InputTuple = [player: AddressLike, cards: BigNumberish[]];
  export type OutputTuple = [player: string, cards: bigint[]];
  export interface OutputObject {
    player: string;
    cards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TexasHoldemRound extends BaseContract {
  connect(runner?: ContractRunner | null): TexasHoldemRound;
  waitForDeployment(): Promise<this>;

  interface: TexasHoldemRoundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BIG_BLIND: TypedContractMethod<[], [bigint], "view">;

  COMMISSION: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_RAISE: TypedContractMethod<[], [bigint], "view">;

  SMALL_BLIND: TypedContractMethod<[], [bigint], "view">;

  TIMEOUT_ACT: TypedContractMethod<[], [bigint], "view">;

  bigBlindBet: TypedContractMethod<[], [void], "payable">;

  button: TypedContractMethod<[], [bigint], "view">;

  calls: TypedContractMethod<[], [void], "payable">;

  check: TypedContractMethod<[], [void], "nonpayable">;

  deadline: TypedContractMethod<[], [bigint], "view">;

  drawCards: TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  flipCards: TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  fold: TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  game: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  joinGame: TypedContractMethod<
    [_pubKey: BytesLike, _memo: BytesLike, _keyProof: BytesLike],
    [void],
    "payable"
  >;

  leaveGame: TypedContractMethod<[], [void], "nonpayable">;

  pickButton: TypedContractMethod<
    [_randFeed: BigNumberish],
    [void],
    "nonpayable"
  >;

  player2Act: TypedContractMethod<[], [string], "view">;

  playerBet: TypedContractMethod<[_player: AddressLike], [bigint], "view">;

  playerBets: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  playerDone: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  playerRemain: TypedContractMethod<[], [bigint], "view">;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  pot: TypedContractMethod<[], [bigint], "view">;

  purgePlayer: TypedContractMethod<[_other: AddressLike], [void], "nonpayable">;

  raise: TypedContractMethod<[], [void], "payable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  resetGame: TypedContractMethod<
    [_params: BytesLike, _numPlayers: BigNumberish, _tableFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setGameInstance: TypedContractMethod<
    [_gameInstance: AddressLike],
    [void],
    "nonpayable"
  >;

  showdown: TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  shuffleDeck: TypedContractMethod<
    [_shuffledDeck: BytesLike[], _shuffleProof: BytesLike],
    [void],
    "nonpayable"
  >;

  smallBlindBet: TypedContractMethod<[], [void], "payable">;

  status: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tableFee: TypedContractMethod<[], [bigint], "view">;

  whoRaised: TypedContractMethod<[], [string], "view">;

  whoShowed: TypedContractMethod<[], [string], "view">;

  winner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BIG_BLIND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMMISSION"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_RAISE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SMALL_BLIND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIMEOUT_ACT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bigBlindBet"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "button"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calls"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "check"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "drawCards"
  ): TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flipCards"
  ): TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fold"
  ): TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "game"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [_pubKey: BytesLike, _memo: BytesLike, _keyProof: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "leaveGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pickButton"
  ): TypedContractMethod<[_randFeed: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "player2Act"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerBet"
  ): TypedContractMethod<[_player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerBets"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerDone"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerRemain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purgePlayer"
  ): TypedContractMethod<[_other: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "raise"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<
    [_params: BytesLike, _numPlayers: BigNumberish, _tableFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameInstance"
  ): TypedContractMethod<[_gameInstance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "showdown"
  ): TypedContractMethod<
    [_revealTokens: BytesLike[], _revealProofs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shuffleDeck"
  ): TypedContractMethod<
    [_shuffledDeck: BytesLike[], _shuffleProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "smallBlindBet"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tableFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whoRaised"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whoShowed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BetBigBlind"
  ): TypedContractEvent<
    BetBigBlindEvent.InputTuple,
    BetBigBlindEvent.OutputTuple,
    BetBigBlindEvent.OutputObject
  >;
  getEvent(
    key: "BetSmallBlind"
  ): TypedContractEvent<
    BetSmallBlindEvent.InputTuple,
    BetSmallBlindEvent.OutputTuple,
    BetSmallBlindEvent.OutputObject
  >;
  getEvent(
    key: "ButtonPicked"
  ): TypedContractEvent<
    ButtonPickedEvent.InputTuple,
    ButtonPickedEvent.OutputTuple,
    ButtonPickedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameTimeout"
  ): TypedContractEvent<
    GameTimeoutEvent.InputTuple,
    GameTimeoutEvent.OutputTuple,
    GameTimeoutEvent.OutputObject
  >;
  getEvent(
    key: "PlayerCalled"
  ): TypedContractEvent<
    PlayerCalledEvent.InputTuple,
    PlayerCalledEvent.OutputTuple,
    PlayerCalledEvent.OutputObject
  >;
  getEvent(
    key: "PlayerChecked"
  ): TypedContractEvent<
    PlayerCheckedEvent.InputTuple,
    PlayerCheckedEvent.OutputTuple,
    PlayerCheckedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerFolded"
  ): TypedContractEvent<
    PlayerFoldedEvent.InputTuple,
    PlayerFoldedEvent.OutputTuple,
    PlayerFoldedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRaised"
  ): TypedContractEvent<
    PlayerRaisedEvent.InputTuple,
    PlayerRaisedEvent.OutputTuple,
    PlayerRaisedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerShowed"
  ): TypedContractEvent<
    PlayerShowedEvent.InputTuple,
    PlayerShowedEvent.OutputTuple,
    PlayerShowedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "BetBigBlind(address,uint256)": TypedContractEvent<
      BetBigBlindEvent.InputTuple,
      BetBigBlindEvent.OutputTuple,
      BetBigBlindEvent.OutputObject
    >;
    BetBigBlind: TypedContractEvent<
      BetBigBlindEvent.InputTuple,
      BetBigBlindEvent.OutputTuple,
      BetBigBlindEvent.OutputObject
    >;

    "BetSmallBlind(address,uint256)": TypedContractEvent<
      BetSmallBlindEvent.InputTuple,
      BetSmallBlindEvent.OutputTuple,
      BetSmallBlindEvent.OutputObject
    >;
    BetSmallBlind: TypedContractEvent<
      BetSmallBlindEvent.InputTuple,
      BetSmallBlindEvent.OutputTuple,
      BetSmallBlindEvent.OutputObject
    >;

    "ButtonPicked(address)": TypedContractEvent<
      ButtonPickedEvent.InputTuple,
      ButtonPickedEvent.OutputTuple,
      ButtonPickedEvent.OutputObject
    >;
    ButtonPicked: TypedContractEvent<
      ButtonPickedEvent.InputTuple,
      ButtonPickedEvent.OutputTuple,
      ButtonPickedEvent.OutputObject
    >;

    "GameEnded(address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameTimeout(address,uint256)": TypedContractEvent<
      GameTimeoutEvent.InputTuple,
      GameTimeoutEvent.OutputTuple,
      GameTimeoutEvent.OutputObject
    >;
    GameTimeout: TypedContractEvent<
      GameTimeoutEvent.InputTuple,
      GameTimeoutEvent.OutputTuple,
      GameTimeoutEvent.OutputObject
    >;

    "PlayerCalled(address,uint256)": TypedContractEvent<
      PlayerCalledEvent.InputTuple,
      PlayerCalledEvent.OutputTuple,
      PlayerCalledEvent.OutputObject
    >;
    PlayerCalled: TypedContractEvent<
      PlayerCalledEvent.InputTuple,
      PlayerCalledEvent.OutputTuple,
      PlayerCalledEvent.OutputObject
    >;

    "PlayerChecked(address,uint256)": TypedContractEvent<
      PlayerCheckedEvent.InputTuple,
      PlayerCheckedEvent.OutputTuple,
      PlayerCheckedEvent.OutputObject
    >;
    PlayerChecked: TypedContractEvent<
      PlayerCheckedEvent.InputTuple,
      PlayerCheckedEvent.OutputTuple,
      PlayerCheckedEvent.OutputObject
    >;

    "PlayerFolded(address)": TypedContractEvent<
      PlayerFoldedEvent.InputTuple,
      PlayerFoldedEvent.OutputTuple,
      PlayerFoldedEvent.OutputObject
    >;
    PlayerFolded: TypedContractEvent<
      PlayerFoldedEvent.InputTuple,
      PlayerFoldedEvent.OutputTuple,
      PlayerFoldedEvent.OutputObject
    >;

    "PlayerRaised(address,uint256)": TypedContractEvent<
      PlayerRaisedEvent.InputTuple,
      PlayerRaisedEvent.OutputTuple,
      PlayerRaisedEvent.OutputObject
    >;
    PlayerRaised: TypedContractEvent<
      PlayerRaisedEvent.InputTuple,
      PlayerRaisedEvent.OutputTuple,
      PlayerRaisedEvent.OutputObject
    >;

    "PlayerShowed(address,uint256[])": TypedContractEvent<
      PlayerShowedEvent.InputTuple,
      PlayerShowedEvent.OutputTuple,
      PlayerShowedEvent.OutputObject
    >;
    PlayerShowed: TypedContractEvent<
      PlayerShowedEvent.InputTuple,
      PlayerShowedEvent.OutputTuple,
      PlayerShowedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
