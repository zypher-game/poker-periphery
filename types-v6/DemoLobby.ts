/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ILobby {
  export type WaitingStruct = {
    player: AddressLike;
    name: string;
    publicKey: BytesLike;
  };

  export type WaitingStructOutput = [
    player: string,
    name: string,
    publicKey: string
  ] & { player: string; name: string; publicKey: string };

  export type PendingActionStruct = {
    act: BigNumberish;
    users: AddressLike[];
    timeout: BigNumberish;
  };

  export type PendingActionStructOutput = [
    act: bigint,
    users: string[],
    timeout: bigint
  ] & { act: bigint; users: string[]; timeout: bigint };

  export type TableStruct = {
    id: BigNumberish;
    table: AddressLike;
    seats: BigNumberish;
    activePlayers: BigNumberish;
    status: BigNumberish;
    waitings: ILobby.WaitingStruct[];
    config: MentalPokerHelper.ConfigStruct;
    pendingAction: ILobby.PendingActionStruct;
  };

  export type TableStructOutput = [
    id: bigint,
    table: string,
    seats: bigint,
    activePlayers: bigint,
    status: bigint,
    waitings: ILobby.WaitingStructOutput[],
    config: MentalPokerHelper.ConfigStructOutput,
    pendingAction: ILobby.PendingActionStructOutput
  ] & {
    id: bigint;
    table: string;
    seats: bigint;
    activePlayers: bigint;
    status: bigint;
    waitings: ILobby.WaitingStructOutput[];
    config: MentalPokerHelper.ConfigStructOutput;
    pendingAction: ILobby.PendingActionStructOutput;
  };
}

export declare namespace MentalPokerHelper {
  export type ConfigStruct = {
    m: BigNumberish;
    n: BigNumberish;
    param: BytesLike;
    items: BytesLike[];
  };

  export type ConfigStructOutput = [
    m: bigint,
    n: bigint,
    param: string,
    items: string[]
  ] & { m: bigint; n: bigint; param: string; items: string[] };
}

export interface DemoLobbyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorize"
      | "cancelAuthorization"
      | "cardConfig"
      | "createTable"
      | "initialize"
      | "isPlayerPlaying"
      | "isPlayerWaiting"
      | "join"
      | "leave"
      | "mainWallet"
      | "owner"
      | "proxiableUUID"
      | "ready"
      | "removeTable"
      | "renounceOwnership"
      | "reportPlayerLeft"
      | "reportTableEnded"
      | "revealSeats"
      | "setHelper"
      | "setReadyTime"
      | "setRevealTime"
      | "setShuffleTime"
      | "setStakeAmount"
      | "setStakeRatio"
      | "setStakeToken"
      | "setTable"
      | "setTableFactory"
      | "setTablePlayTime"
      | "shuffleSeats"
      | "tableExists"
      | "tablePlaying"
      | "tables"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "verifySigner"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Bet"
      | "GameStarted"
      | "Initialized"
      | "OwnershipTransferred"
      | "PendingReveal"
      | "PendingShuffle"
      | "PlayerJoined"
      | "PlayerLeft"
      | "PlayerReady"
      | "PlayerRevealedSeat"
      | "PlayerSeated"
      | "PlayerShuffledSeats"
      | "TableStarted"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorize",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cardConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerPlaying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerWaiting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [BigNumberish, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mainWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ready", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportPlayerLeft",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportTableEnded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealSeats",
    values: [BigNumberish, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setHelper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReadyTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevealTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShuffleTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTable",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTableFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTablePlayTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffleSeats",
    values: [BigNumberish, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tableExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tablePlaying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tables", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigner",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cardConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerPlaying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerWaiting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mainWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ready", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportPlayerLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportTableEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealSeats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHelper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReadyTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevealTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShuffleTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTableFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTablePlayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shuffleSeats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tableExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tablePlaying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tables", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    stage: BigNumberish,
    position: BigNumberish,
    option: BigNumberish,
    callAmount: BigNumberish,
    raiseAmount: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    stage: bigint,
    position: bigint,
    option: bigint,
    callAmount: bigint,
    raiseAmount: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    stage: bigint;
    position: bigint;
    option: bigint;
    callAmount: bigint;
    raiseAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [tableId: BigNumberish, gameId: BigNumberish];
  export type OutputTuple = [tableId: bigint, gameId: bigint];
  export interface OutputObject {
    tableId: bigint;
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingRevealEvent {
  export type InputTuple = [
    tableId: BigNumberish,
    player: AddressLike,
    seats: BytesLike[],
    timeout: BigNumberish
  ];
  export type OutputTuple = [
    tableId: bigint,
    player: string,
    seats: string[],
    timeout: bigint
  ];
  export interface OutputObject {
    tableId: bigint;
    player: string;
    seats: string[];
    timeout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingShuffleEvent {
  export type InputTuple = [
    tableId: BigNumberish,
    player: AddressLike,
    seats: BytesLike[],
    shareKey: BytesLike,
    timeout: BigNumberish
  ];
  export type OutputTuple = [
    tableId: bigint,
    player: string,
    seats: string[],
    shareKey: string,
    timeout: bigint
  ];
  export interface OutputObject {
    tableId: bigint;
    player: string;
    seats: string[];
    shareKey: string;
    timeout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [
    tableId: BigNumberish,
    player: AddressLike,
    name: string
  ];
  export type OutputTuple = [tableId: bigint, player: string, name: string];
  export interface OutputObject {
    tableId: bigint;
    player: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerLeftEvent {
  export type InputTuple = [tableId: BigNumberish, player: AddressLike];
  export type OutputTuple = [tableId: bigint, player: string];
  export interface OutputObject {
    tableId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerReadyEvent {
  export type InputTuple = [tableId: BigNumberish, player: AddressLike];
  export type OutputTuple = [tableId: bigint, player: string];
  export interface OutputObject {
    tableId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRevealedSeatEvent {
  export type InputTuple = [tableId: BigNumberish, player: AddressLike];
  export type OutputTuple = [tableId: bigint, player: string];
  export interface OutputObject {
    tableId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerSeatedEvent {
  export type InputTuple = [
    tableId: BigNumberish,
    player: AddressLike,
    position: BigNumberish
  ];
  export type OutputTuple = [tableId: bigint, player: string, position: bigint];
  export interface OutputObject {
    tableId: bigint;
    player: string;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerShuffledSeatsEvent {
  export type InputTuple = [tableId: BigNumberish, player: AddressLike];
  export type OutputTuple = [tableId: bigint, player: string];
  export interface OutputObject {
    tableId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TableStartedEvent {
  export type InputTuple = [
    tableId: BigNumberish,
    table: AddressLike,
    players: AddressLike[]
  ];
  export type OutputTuple = [tableId: bigint, table: string, players: string[]];
  export interface OutputObject {
    tableId: bigint;
    table: string;
    players: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DemoLobby extends BaseContract {
  connect(runner?: ContractRunner | null): DemoLobby;
  waitForDeployment(): Promise<this>;

  interface: DemoLobbyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorize: TypedContractMethod<
    [
      deputy: AddressLike,
      until: BigNumberish,
      signature: BytesLike,
      signedAt: BigNumberish
    ],
    [void],
    "payable"
  >;

  cancelAuthorization: TypedContractMethod<
    [deputy: AddressLike],
    [void],
    "nonpayable"
  >;

  cardConfig: TypedContractMethod<
    [],
    [[bigint, bigint, string] & { m: bigint; n: bigint; param: string }],
    "view"
  >;

  createTable: TypedContractMethod<
    [name: string, positionCounts: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [cardFaces: BytesLike[]],
    [void],
    "nonpayable"
  >;

  isPlayerPlaying: TypedContractMethod<
    [player: AddressLike],
    [[boolean, bigint] & { playing: boolean; lastTableId: bigint }],
    "view"
  >;

  isPlayerWaiting: TypedContractMethod<
    [player: AddressLike],
    [boolean],
    "view"
  >;

  join: TypedContractMethod<
    [
      tableId: BigNumberish,
      name: string,
      arg2: BytesLike,
      waitingPublicKey: BytesLike,
      arg4: BytesLike
    ],
    [boolean],
    "payable"
  >;

  leave: TypedContractMethod<[], [bigint], "nonpayable">;

  mainWallet: TypedContractMethod<[sender: AddressLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  ready: TypedContractMethod<[], [boolean], "nonpayable">;

  removeTable: TypedContractMethod<
    [tableId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reportPlayerLeft: TypedContractMethod<
    [tableId: BigNumberish, player: AddressLike, balance: BigNumberish],
    [void],
    "nonpayable"
  >;

  reportTableEnded: TypedContractMethod<
    [tableId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revealSeats: TypedContractMethod<
    [tableId: BigNumberish, revealed: BytesLike[], revealProofs: BytesLike[]],
    [boolean],
    "nonpayable"
  >;

  setHelper: TypedContractMethod<[helper: AddressLike], [void], "nonpayable">;

  setReadyTime: TypedContractMethod<
    [readyTimeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRevealTime: TypedContractMethod<
    [revealTimeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  setShuffleTime: TypedContractMethod<
    [shuffleTimeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakeAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakeRatio: TypedContractMethod<
    [ratio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakeToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  setTable: TypedContractMethod<
    [tableId: BigNumberish, table: AddressLike],
    [void],
    "nonpayable"
  >;

  setTableFactory: TypedContractMethod<
    [table: AddressLike],
    [void],
    "nonpayable"
  >;

  setTablePlayTime: TypedContractMethod<
    [tablePlayTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  shuffleSeats: TypedContractMethod<
    [tableId: BigNumberish, arg1: BytesLike[], arg2: BytesLike],
    [boolean],
    "nonpayable"
  >;

  tableExists: TypedContractMethod<[tableId: BigNumberish], [boolean], "view">;

  tablePlaying: TypedContractMethod<[tableId: BigNumberish], [boolean], "view">;

  tables: TypedContractMethod<[], [ILobby.TableStructOutput[]], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  verifySigner: TypedContractMethod<
    [sig: BytesLike, message: BytesLike, signer: AddressLike],
    [boolean],
    "view"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorize"
  ): TypedContractMethod<
    [
      deputy: AddressLike,
      until: BigNumberish,
      signature: BytesLike,
      signedAt: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelAuthorization"
  ): TypedContractMethod<[deputy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cardConfig"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, string] & { m: bigint; n: bigint; param: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTable"
  ): TypedContractMethod<
    [name: string, positionCounts: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[cardFaces: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPlayerPlaying"
  ): TypedContractMethod<
    [player: AddressLike],
    [[boolean, bigint] & { playing: boolean; lastTableId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPlayerWaiting"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<
    [
      tableId: BigNumberish,
      name: string,
      arg2: BytesLike,
      waitingPublicKey: BytesLike,
      arg4: BytesLike
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "leave"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "mainWallet"
  ): TypedContractMethod<[sender: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ready"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "removeTable"
  ): TypedContractMethod<[tableId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reportPlayerLeft"
  ): TypedContractMethod<
    [tableId: BigNumberish, player: AddressLike, balance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reportTableEnded"
  ): TypedContractMethod<[tableId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealSeats"
  ): TypedContractMethod<
    [tableId: BigNumberish, revealed: BytesLike[], revealProofs: BytesLike[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHelper"
  ): TypedContractMethod<[helper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReadyTime"
  ): TypedContractMethod<[readyTimeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRevealTime"
  ): TypedContractMethod<[revealTimeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShuffleTime"
  ): TypedContractMethod<[shuffleTimeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakeAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakeRatio"
  ): TypedContractMethod<[ratio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakeToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTable"
  ): TypedContractMethod<
    [tableId: BigNumberish, table: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTableFactory"
  ): TypedContractMethod<[table: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTablePlayTime"
  ): TypedContractMethod<[tablePlayTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shuffleSeats"
  ): TypedContractMethod<
    [tableId: BigNumberish, arg1: BytesLike[], arg2: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tableExists"
  ): TypedContractMethod<[tableId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "tablePlaying"
  ): TypedContractMethod<[tableId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "tables"
  ): TypedContractMethod<[], [ILobby.TableStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifySigner"
  ): TypedContractMethod<
    [sig: BytesLike, message: BytesLike, signer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Bet"
  ): TypedContractEvent<
    BetEvent.InputTuple,
    BetEvent.OutputTuple,
    BetEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PendingReveal"
  ): TypedContractEvent<
    PendingRevealEvent.InputTuple,
    PendingRevealEvent.OutputTuple,
    PendingRevealEvent.OutputObject
  >;
  getEvent(
    key: "PendingShuffle"
  ): TypedContractEvent<
    PendingShuffleEvent.InputTuple,
    PendingShuffleEvent.OutputTuple,
    PendingShuffleEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerLeft"
  ): TypedContractEvent<
    PlayerLeftEvent.InputTuple,
    PlayerLeftEvent.OutputTuple,
    PlayerLeftEvent.OutputObject
  >;
  getEvent(
    key: "PlayerReady"
  ): TypedContractEvent<
    PlayerReadyEvent.InputTuple,
    PlayerReadyEvent.OutputTuple,
    PlayerReadyEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRevealedSeat"
  ): TypedContractEvent<
    PlayerRevealedSeatEvent.InputTuple,
    PlayerRevealedSeatEvent.OutputTuple,
    PlayerRevealedSeatEvent.OutputObject
  >;
  getEvent(
    key: "PlayerSeated"
  ): TypedContractEvent<
    PlayerSeatedEvent.InputTuple,
    PlayerSeatedEvent.OutputTuple,
    PlayerSeatedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerShuffledSeats"
  ): TypedContractEvent<
    PlayerShuffledSeatsEvent.InputTuple,
    PlayerShuffledSeatsEvent.OutputTuple,
    PlayerShuffledSeatsEvent.OutputObject
  >;
  getEvent(
    key: "TableStarted"
  ): TypedContractEvent<
    TableStartedEvent.InputTuple,
    TableStartedEvent.OutputTuple,
    TableStartedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Bet(uint64,uint8,uint8,uint8,uint256,uint256)": TypedContractEvent<
      BetEvent.InputTuple,
      BetEvent.OutputTuple,
      BetEvent.OutputObject
    >;
    Bet: TypedContractEvent<
      BetEvent.InputTuple,
      BetEvent.OutputTuple,
      BetEvent.OutputObject
    >;

    "GameStarted(uint32,uint64)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PendingReveal(uint32,address,bytes[],uint32)": TypedContractEvent<
      PendingRevealEvent.InputTuple,
      PendingRevealEvent.OutputTuple,
      PendingRevealEvent.OutputObject
    >;
    PendingReveal: TypedContractEvent<
      PendingRevealEvent.InputTuple,
      PendingRevealEvent.OutputTuple,
      PendingRevealEvent.OutputObject
    >;

    "PendingShuffle(uint32,address,bytes[],bytes,uint32)": TypedContractEvent<
      PendingShuffleEvent.InputTuple,
      PendingShuffleEvent.OutputTuple,
      PendingShuffleEvent.OutputObject
    >;
    PendingShuffle: TypedContractEvent<
      PendingShuffleEvent.InputTuple,
      PendingShuffleEvent.OutputTuple,
      PendingShuffleEvent.OutputObject
    >;

    "PlayerJoined(uint32,address,string)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "PlayerLeft(uint32,address)": TypedContractEvent<
      PlayerLeftEvent.InputTuple,
      PlayerLeftEvent.OutputTuple,
      PlayerLeftEvent.OutputObject
    >;
    PlayerLeft: TypedContractEvent<
      PlayerLeftEvent.InputTuple,
      PlayerLeftEvent.OutputTuple,
      PlayerLeftEvent.OutputObject
    >;

    "PlayerReady(uint32,address)": TypedContractEvent<
      PlayerReadyEvent.InputTuple,
      PlayerReadyEvent.OutputTuple,
      PlayerReadyEvent.OutputObject
    >;
    PlayerReady: TypedContractEvent<
      PlayerReadyEvent.InputTuple,
      PlayerReadyEvent.OutputTuple,
      PlayerReadyEvent.OutputObject
    >;

    "PlayerRevealedSeat(uint32,address)": TypedContractEvent<
      PlayerRevealedSeatEvent.InputTuple,
      PlayerRevealedSeatEvent.OutputTuple,
      PlayerRevealedSeatEvent.OutputObject
    >;
    PlayerRevealedSeat: TypedContractEvent<
      PlayerRevealedSeatEvent.InputTuple,
      PlayerRevealedSeatEvent.OutputTuple,
      PlayerRevealedSeatEvent.OutputObject
    >;

    "PlayerSeated(uint32,address,uint8)": TypedContractEvent<
      PlayerSeatedEvent.InputTuple,
      PlayerSeatedEvent.OutputTuple,
      PlayerSeatedEvent.OutputObject
    >;
    PlayerSeated: TypedContractEvent<
      PlayerSeatedEvent.InputTuple,
      PlayerSeatedEvent.OutputTuple,
      PlayerSeatedEvent.OutputObject
    >;

    "PlayerShuffledSeats(uint32,address)": TypedContractEvent<
      PlayerShuffledSeatsEvent.InputTuple,
      PlayerShuffledSeatsEvent.OutputTuple,
      PlayerShuffledSeatsEvent.OutputObject
    >;
    PlayerShuffledSeats: TypedContractEvent<
      PlayerShuffledSeatsEvent.InputTuple,
      PlayerShuffledSeatsEvent.OutputTuple,
      PlayerShuffledSeatsEvent.OutputObject
    >;

    "TableStarted(uint32,address,address[])": TypedContractEvent<
      TableStartedEvent.InputTuple,
      TableStartedEvent.OutputTuple,
      TableStartedEvent.OutputObject
    >;
    TableStarted: TypedContractEvent<
      TableStartedEvent.InputTuple,
      TableStartedEvent.OutputTuple,
      TableStartedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
