/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IPokerTable, IPokerTableInterface } from "../IPokerTable";

const _abi = [
  {
    inputs: [],
    name: "info",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "tableId",
            type: "uint32",
          },
          {
            internalType: "string",
            name: "subject",
            type: "string",
          },
          {
            internalType: "address",
            name: "lobby",
            type: "address",
          },
          {
            internalType: "enum IPokerTable.GameType",
            name: "gameType",
            type: "uint8",
          },
          {
            internalType: "enum IPokerTable.TableStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "seats",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "initialBuyin",
            type: "uint256",
          },
        ],
        internalType: "struct IPokerTable.Info",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isPlaying",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
        ],
        internalType: "struct IPokerTable.Player[]",
        name: "players",
        type: "tuple[]",
      },
    ],
    name: "newTable",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "pid",
        type: "uint8",
      },
    ],
    name: "position",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "pid",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "address",
                name: "wallet",
                type: "address",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
            ],
            internalType: "struct IPokerTable.Player",
            name: "player",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "bets",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "chips",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pendingBuyin",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "leftAt",
            type: "uint32",
          },
        ],
        internalType: "struct IPokerTable.Position",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPots",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPokerTable__factory {
  static readonly abi = _abi;
  static createInterface(): IPokerTableInterface {
    return new utils.Interface(_abi) as IPokerTableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPokerTable {
    return new Contract(address, _abi, signerOrProvider) as IPokerTable;
  }
}
