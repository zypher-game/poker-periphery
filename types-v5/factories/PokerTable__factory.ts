/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { PokerTable, PokerTableInterface } from "../PokerTable";

const _abi = [
  "error ChipError()",
  "error ChipForbidden()",
  "event Approval(address indexed,address indexed,uint256)",
  "event Initialized(uint8)",
  "event OwnershipTransferred(address indexed,address indexed)",
  "event Transfer(address indexed,address indexed,uint256)",
  "function TABLE_TIMEOUT() view returns (uint32)",
  "function activePlayerCounts() view returns (uint8)",
  "function allowance(address,address) view returns (uint256)",
  "function approve(address,uint256) returns (bool)",
  "function balanceOf(address) view returns (uint256)",
  "function bets(address) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function decreaseAllowance(address,uint256) returns (bool)",
  "function increaseAllowance(address,uint256) returns (bool)",
  "function info() view returns (tuple(uint32,string,address,uint8,uint8,uint8,uint256))",
  "function isPlaying() view returns (bool)",
  "function name() view returns (string)",
  "function newTable(tuple(address,string)[]) payable",
  "function owner() view returns (address)",
  "function playerCounts() view returns (uint8)",
  "function position(uint8) view returns (tuple(uint8,tuple(address,string),uint256,uint256,uint32))",
  "function renounceOwnership()",
  "function symbol() view returns (string)",
  "function totalPots() view returns (uint256)",
  "function totalSupply() view returns (uint256)",
  "function transfer(address,uint256) returns (bool)",
  "function transferFrom(address,address,uint256) returns (bool)",
  "function transferOwnership(address)",
] as const;

export class PokerTable__factory {
  static readonly abi = _abi;
  static createInterface(): PokerTableInterface {
    return new utils.Interface(_abi) as PokerTableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PokerTable {
    return new Contract(address, _abi, signerOrProvider) as PokerTable;
  }
}
