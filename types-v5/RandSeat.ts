/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RandSeatInterface extends utils.Interface {
  functions: {
    "_hashToCard(bytes32)": FunctionFragment;
    "_joiners(uint256)": FunctionFragment;
    "_params()": FunctionFragment;
    "_positions(uint256)": FunctionFragment;
    "_publicKeys(uint256)": FunctionFragment;
    "_shuffledDecks(uint256,uint256)": FunctionFragment;
    "currentDeck()": FunctionFragment;
    "hashedCards(uint256)": FunctionFragment;
    "info()": FunctionFragment;
    "join(bytes)": FunctionFragment;
    "maskThem()": FunctionFragment;
    "maskedCards()": FunctionFragment;
    "openedCards(uint256)": FunctionFragment;
    "poker()": FunctionFragment;
    "sharedKey()": FunctionFragment;
    "shuffleThem(bytes[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_hashToCard"
      | "_joiners"
      | "_params"
      | "_positions"
      | "_publicKeys"
      | "_shuffledDecks"
      | "currentDeck"
      | "hashedCards"
      | "info"
      | "join"
      | "maskThem"
      | "maskedCards"
      | "openedCards"
      | "poker"
      | "sharedKey"
      | "shuffleThem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_hashToCard",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_joiners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_positions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_publicKeys",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_shuffledDecks",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDeck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashedCards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "maskThem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maskedCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openedCards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "poker", values?: undefined): string;
  encodeFunctionData(functionFragment: "sharedKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shuffleThem",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_hashToCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_joiners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_publicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_shuffledDecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maskThem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maskedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharedKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shuffleThem",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RandSeat extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RandSeatInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _hashToCard(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & { face: string; back: string; order: number }
    >;

    _joiners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _params(overrides?: CallOverrides): Promise<[string]>;

    _positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _publicKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _shuffledDecks(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currentDeck(
      overrides?: CallOverrides
    ): Promise<[string[]] & { deck: string[] }>;

    hashedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    info(
      overrides?: CallOverrides
    ): Promise<[string, string[]] & { params: string; positions: string[] }>;

    join(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maskThem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maskedCards(
      overrides?: CallOverrides
    ): Promise<[string[]] & { cards: string[] }>;

    openedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poker(overrides?: CallOverrides): Promise<[string]>;

    sharedKey(overrides?: CallOverrides): Promise<[string]>;

    shuffleThem(
      newDeck: PromiseOrValue<BytesLike>[],
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _hashToCard(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & { face: string; back: string; order: number }
  >;

  _joiners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _params(overrides?: CallOverrides): Promise<string>;

  _positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _publicKeys(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _shuffledDecks(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  currentDeck(overrides?: CallOverrides): Promise<string[]>;

  hashedCards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  info(
    overrides?: CallOverrides
  ): Promise<[string, string[]] & { params: string; positions: string[] }>;

  join(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maskThem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maskedCards(overrides?: CallOverrides): Promise<string[]>;

  openedCards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  poker(overrides?: CallOverrides): Promise<string>;

  sharedKey(overrides?: CallOverrides): Promise<string>;

  shuffleThem(
    newDeck: PromiseOrValue<BytesLike>[],
    proof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _hashToCard(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & { face: string; back: string; order: number }
    >;

    _joiners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _params(overrides?: CallOverrides): Promise<string>;

    _positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _publicKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _shuffledDecks(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    currentDeck(overrides?: CallOverrides): Promise<string[]>;

    hashedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    info(
      overrides?: CallOverrides
    ): Promise<[string, string[]] & { params: string; positions: string[] }>;

    join(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    maskThem(overrides?: CallOverrides): Promise<void>;

    maskedCards(overrides?: CallOverrides): Promise<string[]>;

    openedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    poker(overrides?: CallOverrides): Promise<string>;

    sharedKey(overrides?: CallOverrides): Promise<string>;

    shuffleThem(
      newDeck: PromiseOrValue<BytesLike>[],
      proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _hashToCard(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _joiners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _params(overrides?: CallOverrides): Promise<BigNumber>;

    _positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _publicKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _shuffledDecks(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentDeck(overrides?: CallOverrides): Promise<BigNumber>;

    hashedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maskThem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maskedCards(overrides?: CallOverrides): Promise<BigNumber>;

    openedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poker(overrides?: CallOverrides): Promise<BigNumber>;

    sharedKey(overrides?: CallOverrides): Promise<BigNumber>;

    shuffleThem(
      newDeck: PromiseOrValue<BytesLike>[],
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _hashToCard(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _joiners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _publicKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _shuffledDecks(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDeck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maskThem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maskedCards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openedCards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sharedKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shuffleThem(
      newDeck: PromiseOrValue<BytesLike>[],
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
