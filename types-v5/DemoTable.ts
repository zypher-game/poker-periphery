/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPokerTable {
  export type PokerCardStruct = {
    suit: PromiseOrValue<BigNumberish>;
    rank: PromiseOrValue<BigNumberish>;
  };

  export type PokerCardStructOutput = [number, number] & {
    suit: number;
    rank: number;
  };

  export type PlayerStruct = {
    wallet: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
  };

  export type PlayerStructOutput = [string, string] & {
    wallet: string;
    name: string;
  };

  export type InfoStruct = {
    subject: PromiseOrValue<string>;
    lobby: PromiseOrValue<string>;
    gameType: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    seats: PromiseOrValue<BigNumberish>;
    initialBuyin: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [
    string,
    string,
    number,
    number,
    number,
    BigNumber
  ] & {
    subject: string;
    lobby: string;
    gameType: number;
    status: number;
    seats: number;
    initialBuyin: BigNumber;
  };

  export type PositionStruct = {
    pid: PromiseOrValue<BigNumberish>;
    player: IPokerTable.PlayerStruct;
    wins: PromiseOrValue<BigNumberish>;
    draws: PromiseOrValue<BigNumberish>;
    bets: PromiseOrValue<BigNumberish>;
    chips: PromiseOrValue<BigNumberish>;
    pendingBuyin: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [
    number,
    IPokerTable.PlayerStructOutput,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    pid: number;
    player: IPokerTable.PlayerStructOutput;
    wins: number;
    draws: number;
    bets: BigNumber;
    chips: BigNumber;
    pendingBuyin: BigNumber;
  };
}

export declare namespace ITexasHoldemTable {
  export type TexasHoldemPositionStruct = {
    pid: PromiseOrValue<BigNumberish>;
    player: IPokerTable.PlayerStruct;
    status: PromiseOrValue<BigNumberish>;
    bets: PromiseOrValue<BigNumberish>;
    chips: PromiseOrValue<BigNumberish>;
    pendingBuyin: PromiseOrValue<BigNumberish>;
    holeCards: IPokerTable.PokerCardStruct[];
    wins: PromiseOrValue<BigNumberish>;
    draws: PromiseOrValue<BigNumberish>;
  };

  export type TexasHoldemPositionStructOutput = [
    number,
    IPokerTable.PlayerStructOutput,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    IPokerTable.PokerCardStructOutput[],
    number,
    number
  ] & {
    pid: number;
    player: IPokerTable.PlayerStructOutput;
    status: number;
    bets: BigNumber;
    chips: BigNumber;
    pendingBuyin: BigNumber;
    holeCards: IPokerTable.PokerCardStructOutput[];
    wins: number;
    draws: number;
  };

  export type TexasHoldemGameStruct = {
    id: PromiseOrValue<BigNumberish>;
    subject: PromiseOrValue<string>;
    stage: PromiseOrValue<BigNumberish>;
    communityCards: IPokerTable.PokerCardStruct[];
    positions: ITexasHoldemTable.TexasHoldemPositionStruct[];
    pot: PromiseOrValue<BigNumberish>;
    minRaise: PromiseOrValue<BigNumberish>;
    betAmount: PromiseOrValue<BigNumberish>;
    actingPosition: PromiseOrValue<BigNumberish>;
    actingTimeout: PromiseOrValue<BigNumberish>;
  };

  export type TexasHoldemGameStructOutput = [
    BigNumber,
    string,
    number,
    IPokerTable.PokerCardStructOutput[],
    ITexasHoldemTable.TexasHoldemPositionStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    id: BigNumber;
    subject: string;
    stage: number;
    communityCards: IPokerTable.PokerCardStructOutput[];
    positions: ITexasHoldemTable.TexasHoldemPositionStructOutput[];
    pot: BigNumber;
    minRaise: BigNumber;
    betAmount: BigNumber;
    actingPosition: number;
    actingTimeout: number;
  };
}

export interface DemoTableInterface extends utils.Interface {
  functions: {
    "TABLE_TIMEOUT()": FunctionFragment;
    "allinBets()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bets(address)": FunctionFragment;
    "callBets()": FunctionFragment;
    "checkBets()": FunctionFragment;
    "cutCards()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "ff()": FunctionFragment;
    "foldBets()": FunctionFragment;
    "forceNewGame()": FunctionFragment;
    "game(bytes)": FunctionFragment;
    "getAllPositions(address)": FunctionFragment;
    "getBigBlind()": FunctionFragment;
    "getGamePlayerCounts(uint64)": FunctionFragment;
    "getPositionHandRanking(uint8)": FunctionFragment;
    "getSmallBlind()": FunctionFragment;
    "highestBet()": FunctionFragment;
    "inTable(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "info()": FunctionFragment;
    "isPlaying()": FunctionFragment;
    "name()": FunctionFragment;
    "newTable((address,string)[])": FunctionFragment;
    "owner()": FunctionFragment;
    "playerCounts()": FunctionFragment;
    "positions()": FunctionFragment;
    "pot()": FunctionFragment;
    "raiseBets(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setup(string,uint8,uint256,uint256,uint256,uint256,address,bytes[])": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TABLE_TIMEOUT"
      | "allinBets"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "bets"
      | "callBets"
      | "checkBets"
      | "cutCards"
      | "decimals"
      | "decreaseAllowance"
      | "ff"
      | "foldBets"
      | "forceNewGame"
      | "game"
      | "getAllPositions"
      | "getBigBlind"
      | "getGamePlayerCounts"
      | "getPositionHandRanking"
      | "getSmallBlind"
      | "highestBet"
      | "inTable"
      | "increaseAllowance"
      | "info"
      | "isPlaying"
      | "name"
      | "newTable"
      | "owner"
      | "playerCounts"
      | "positions"
      | "pot"
      | "raiseBets"
      | "renounceOwnership"
      | "setup"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TABLE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allinBets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "callBets", values?: undefined): string;
  encodeFunctionData(functionFragment: "checkBets", values?: undefined): string;
  encodeFunctionData(functionFragment: "cutCards", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ff", values?: undefined): string;
  encodeFunctionData(functionFragment: "foldBets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceNewGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "game",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBigBlind",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGamePlayerCounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionHandRanking",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSmallBlind",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inTable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPlaying", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newTable",
    values: [IPokerTable.PlayerStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerCounts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "positions", values?: undefined): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raiseBets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "TABLE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allinBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cutCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foldBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceNewGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBigBlind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGamePlayerCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionHandRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmallBlind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "highestBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPlaying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raiseBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DemoTable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DemoTableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TABLE_TIMEOUT(overrides?: CallOverrides): Promise<[number]>;

    allinBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bets(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    callBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cutCards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ff(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        stage: number;
        position: number;
        timeout: number;
      }
    >;

    foldBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITexasHoldemTable.TexasHoldemGameStructOutput] & {
        currentGame: ITexasHoldemTable.TexasHoldemGameStructOutput;
      }
    >;

    getAllPositions(
      viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ITexasHoldemTable.TexasHoldemPositionStructOutput[]] & {
        positions: ITexasHoldemTable.TexasHoldemPositionStructOutput[];
      }
    >;

    getBigBlind(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

    getGamePlayerCounts(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPositionHandRanking(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;

    getSmallBlind(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

    highestBet(overrides?: CallOverrides): Promise<[BigNumber]>;

    inTable(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    info(overrides?: CallOverrides): Promise<[IPokerTable.InfoStructOutput]>;

    isPlaying(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerCounts(overrides?: CallOverrides): Promise<[number]>;

    positions(
      overrides?: CallOverrides
    ): Promise<[IPokerTable.PositionStructOutput[]]>;

    pot(overrides?: CallOverrides): Promise<[BigNumber]>;

    raiseBets(
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardFaces: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  TABLE_TIMEOUT(overrides?: CallOverrides): Promise<number>;

  allinBets(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bets(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callBets(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkBets(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cutCards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ff(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      stage: number;
      position: number;
      timeout: number;
    }
  >;

  foldBets(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceNewGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  game(
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITexasHoldemTable.TexasHoldemGameStructOutput>;

  getAllPositions(
    viewer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ITexasHoldemTable.TexasHoldemPositionStructOutput[]>;

  getBigBlind(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

  getGamePlayerCounts(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPositionHandRanking(
    pos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;

  getSmallBlind(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

  highestBet(overrides?: CallOverrides): Promise<BigNumber>;

  inTable(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  info(overrides?: CallOverrides): Promise<IPokerTable.InfoStructOutput>;

  isPlaying(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  newTable(
    players: IPokerTable.PlayerStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerCounts(overrides?: CallOverrides): Promise<number>;

  positions(
    overrides?: CallOverrides
  ): Promise<IPokerTable.PositionStructOutput[]>;

  pot(overrides?: CallOverrides): Promise<BigNumber>;

  raiseBets(
    totalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setup(
    subject: PromiseOrValue<string>,
    seats: PromiseOrValue<BigNumberish>,
    bbAmount: PromiseOrValue<BigNumberish>,
    sbAmount: PromiseOrValue<BigNumberish>,
    anteAmount: PromiseOrValue<BigNumberish>,
    initialBuyin: PromiseOrValue<BigNumberish>,
    helper: PromiseOrValue<string>,
    cardFaces: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TABLE_TIMEOUT(overrides?: CallOverrides): Promise<number>;

    allinBets(overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bets(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callBets(overrides?: CallOverrides): Promise<void>;

    checkBets(overrides?: CallOverrides): Promise<void>;

    cutCards(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ff(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        stage: number;
        position: number;
        timeout: number;
      }
    >;

    foldBets(overrides?: CallOverrides): Promise<void>;

    forceNewGame(overrides?: CallOverrides): Promise<void>;

    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITexasHoldemTable.TexasHoldemGameStructOutput>;

    getAllPositions(
      viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ITexasHoldemTable.TexasHoldemPositionStructOutput[]>;

    getBigBlind(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

    getGamePlayerCounts(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPositionHandRanking(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;

    getSmallBlind(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; amount: BigNumber }>;

    highestBet(overrides?: CallOverrides): Promise<BigNumber>;

    inTable(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    info(overrides?: CallOverrides): Promise<IPokerTable.InfoStructOutput>;

    isPlaying(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerCounts(overrides?: CallOverrides): Promise<number>;

    positions(
      overrides?: CallOverrides
    ): Promise<IPokerTable.PositionStructOutput[]>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    raiseBets(
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardFaces: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    TABLE_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    allinBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bets(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cutCards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ff(overrides?: CallOverrides): Promise<BigNumber>;

    foldBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPositions(
      viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBigBlind(overrides?: CallOverrides): Promise<BigNumber>;

    getGamePlayerCounts(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionHandRanking(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSmallBlind(overrides?: CallOverrides): Promise<BigNumber>;

    highestBet(overrides?: CallOverrides): Promise<BigNumber>;

    inTable(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    isPlaying(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerCounts(overrides?: CallOverrides): Promise<BigNumber>;

    positions(overrides?: CallOverrides): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    raiseBets(
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardFaces: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TABLE_TIMEOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allinBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bets(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cutCards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foldBets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPositions(
      viewer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBigBlind(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGamePlayerCounts(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionHandRanking(
      pos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmallBlind(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highestBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inTable(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPlaying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerCounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raiseBets(
      totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardFaces: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
