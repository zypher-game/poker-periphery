/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPokerTable {
  export type PokerCardStruct = {
    suit: PromiseOrValue<BigNumberish>;
    rank: PromiseOrValue<BigNumberish>;
  };

  export type PokerCardStructOutput = [number, number] & {
    suit: number;
    rank: number;
  };
}

export interface ITexasHoldemHelperInterface extends utils.Interface {
  functions: {
    "bestHand((uint8,uint8)[7])": FunctionFragment;
    "getHandRanking((uint8,uint8)[5])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "bestHand" | "getHandRanking"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bestHand",
    values: [IPokerTable.PokerCardStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandRanking",
    values: [
      [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "bestHand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHandRanking",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITexasHoldemHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITexasHoldemHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bestHand(
      cards: IPokerTable.PokerCardStruct[],
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;

    getHandRanking(
      cards: [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ],
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;
  };

  bestHand(
    cards: IPokerTable.PokerCardStruct[],
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;

  getHandRanking(
    cards: [
      IPokerTable.PokerCardStruct,
      IPokerTable.PokerCardStruct,
      IPokerTable.PokerCardStruct,
      IPokerTable.PokerCardStruct,
      IPokerTable.PokerCardStruct
    ],
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;

  callStatic: {
    bestHand(
      cards: IPokerTable.PokerCardStruct[],
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;

    getHandRanking(
      cards: [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ],
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { ranking: number; kickers: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    bestHand(
      cards: IPokerTable.PokerCardStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHandRanking(
      cards: [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bestHand(
      cards: IPokerTable.PokerCardStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHandRanking(
      cards: [
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct,
        IPokerTable.PokerCardStruct
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
