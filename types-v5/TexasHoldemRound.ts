/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TexasHoldemRoundInterface extends utils.Interface {
  functions: {
    "BIG_BLIND()": FunctionFragment;
    "COMMISSION(uint256)": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MIN_RAISE()": FunctionFragment;
    "SMALL_BLIND()": FunctionFragment;
    "TIMEOUT_ACT()": FunctionFragment;
    "bigBlindBet()": FunctionFragment;
    "button()": FunctionFragment;
    "calls()": FunctionFragment;
    "check()": FunctionFragment;
    "deadline()": FunctionFragment;
    "drawCards(bytes[],bytes[])": FunctionFragment;
    "flipCards(bytes[],bytes[])": FunctionFragment;
    "fold(bytes[],bytes[])": FunctionFragment;
    "game()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "joinGame(bytes,bytes,bytes)": FunctionFragment;
    "leaveGame()": FunctionFragment;
    "pickButton(uint256)": FunctionFragment;
    "player2Act()": FunctionFragment;
    "playerBet(address)": FunctionFragment;
    "playerBets(address)": FunctionFragment;
    "playerDone(address)": FunctionFragment;
    "playerRemain()": FunctionFragment;
    "players(uint256)": FunctionFragment;
    "pot()": FunctionFragment;
    "purgePlayer(address)": FunctionFragment;
    "raise()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resetGame(bytes,uint256,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setGameInstance(address)": FunctionFragment;
    "showdown(bytes[],bytes[])": FunctionFragment;
    "shuffleDeck(bytes[],bytes)": FunctionFragment;
    "smallBlindBet()": FunctionFragment;
    "status()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tableFee()": FunctionFragment;
    "whoRaised()": FunctionFragment;
    "whoShowed()": FunctionFragment;
    "winner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BIG_BLIND"
      | "COMMISSION"
      | "DEFAULT_ADMIN_ROLE"
      | "MIN_RAISE"
      | "SMALL_BLIND"
      | "TIMEOUT_ACT"
      | "bigBlindBet"
      | "button"
      | "calls"
      | "check"
      | "deadline"
      | "drawCards"
      | "flipCards"
      | "fold"
      | "game"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "joinGame"
      | "leaveGame"
      | "pickButton"
      | "player2Act"
      | "playerBet"
      | "playerBets"
      | "playerDone"
      | "playerRemain"
      | "players"
      | "pot"
      | "purgePlayer"
      | "raise"
      | "renounceRole"
      | "resetGame"
      | "revokeRole"
      | "setGameInstance"
      | "showdown"
      | "shuffleDeck"
      | "smallBlindBet"
      | "status"
      | "supportsInterface"
      | "tableFee"
      | "whoRaised"
      | "whoShowed"
      | "winner"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BIG_BLIND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "COMMISSION",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_RAISE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SMALL_BLIND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIMEOUT_ACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBlindBet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "button", values?: undefined): string;
  encodeFunctionData(functionFragment: "calls", values?: undefined): string;
  encodeFunctionData(functionFragment: "check", values?: undefined): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drawCards",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flipCards",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fold",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "game", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "leaveGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pickButton",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "player2Act",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerBet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerBets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerDone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerRemain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purgePlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "raise", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetGame",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameInstance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "showdown",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffleDeck",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "smallBlindBet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "tableFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "whoRaised", values?: undefined): string;
  encodeFunctionData(functionFragment: "whoShowed", values?: undefined): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BIG_BLIND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "COMMISSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_RAISE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SMALL_BLIND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIMEOUT_ACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBlindBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "button", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flipCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pickButton", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player2Act", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerDone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerRemain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purgePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGameInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "showdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shuffleDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smallBlindBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tableFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whoRaised", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whoShowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;

  events: {
    "BetBigBlind(address,uint256)": EventFragment;
    "BetSmallBlind(address,uint256)": EventFragment;
    "ButtonPicked(address)": EventFragment;
    "GameEnded(address,uint256)": EventFragment;
    "GameTimeout(address,uint256)": EventFragment;
    "PlayerCalled(address,uint256)": EventFragment;
    "PlayerChecked(address,uint256)": EventFragment;
    "PlayerFolded(address)": EventFragment;
    "PlayerRaised(address,uint256)": EventFragment;
    "PlayerShowed(address,uint256[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetBigBlind"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetSmallBlind"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ButtonPicked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameTimeout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerChecked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerFolded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerRaised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerShowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface BetBigBlindEventObject {
  player: string;
  amount: BigNumber;
}
export type BetBigBlindEvent = TypedEvent<
  [string, BigNumber],
  BetBigBlindEventObject
>;

export type BetBigBlindEventFilter = TypedEventFilter<BetBigBlindEvent>;

export interface BetSmallBlindEventObject {
  player: string;
  amount: BigNumber;
}
export type BetSmallBlindEvent = TypedEvent<
  [string, BigNumber],
  BetSmallBlindEventObject
>;

export type BetSmallBlindEventFilter = TypedEventFilter<BetSmallBlindEvent>;

export interface ButtonPickedEventObject {
  player: string;
}
export type ButtonPickedEvent = TypedEvent<[string], ButtonPickedEventObject>;

export type ButtonPickedEventFilter = TypedEventFilter<ButtonPickedEvent>;

export interface GameEndedEventObject {
  winner: string;
  amount: BigNumber;
}
export type GameEndedEvent = TypedEvent<
  [string, BigNumber],
  GameEndedEventObject
>;

export type GameEndedEventFilter = TypedEventFilter<GameEndedEvent>;

export interface GameTimeoutEventObject {
  blame: string;
  fine: BigNumber;
}
export type GameTimeoutEvent = TypedEvent<
  [string, BigNumber],
  GameTimeoutEventObject
>;

export type GameTimeoutEventFilter = TypedEventFilter<GameTimeoutEvent>;

export interface PlayerCalledEventObject {
  player: string;
  amount: BigNumber;
}
export type PlayerCalledEvent = TypedEvent<
  [string, BigNumber],
  PlayerCalledEventObject
>;

export type PlayerCalledEventFilter = TypedEventFilter<PlayerCalledEvent>;

export interface PlayerCheckedEventObject {
  player: string;
  amount: BigNumber;
}
export type PlayerCheckedEvent = TypedEvent<
  [string, BigNumber],
  PlayerCheckedEventObject
>;

export type PlayerCheckedEventFilter = TypedEventFilter<PlayerCheckedEvent>;

export interface PlayerFoldedEventObject {
  player: string;
}
export type PlayerFoldedEvent = TypedEvent<[string], PlayerFoldedEventObject>;

export type PlayerFoldedEventFilter = TypedEventFilter<PlayerFoldedEvent>;

export interface PlayerRaisedEventObject {
  player: string;
  amount: BigNumber;
}
export type PlayerRaisedEvent = TypedEvent<
  [string, BigNumber],
  PlayerRaisedEventObject
>;

export type PlayerRaisedEventFilter = TypedEventFilter<PlayerRaisedEvent>;

export interface PlayerShowedEventObject {
  player: string;
  cards: BigNumber[];
}
export type PlayerShowedEvent = TypedEvent<
  [string, BigNumber[]],
  PlayerShowedEventObject
>;

export type PlayerShowedEventFilter = TypedEventFilter<PlayerShowedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TexasHoldemRound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TexasHoldemRoundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BIG_BLIND(overrides?: CallOverrides): Promise<[BigNumber]>;

    COMMISSION(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MIN_RAISE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SMALL_BLIND(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIMEOUT_ACT(overrides?: CallOverrides): Promise<[BigNumber]>;

    bigBlindBet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    button(overrides?: CallOverrides): Promise<[BigNumber]>;

    calls(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    check(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    drawCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flipCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fold(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    game(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinGame(
      _pubKey: PromiseOrValue<BytesLike>,
      _memo: PromiseOrValue<BytesLike>,
      _keyProof: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pickButton(
      _randFeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    player2Act(overrides?: CallOverrides): Promise<[string]>;

    playerBet(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerDone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playerRemain(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pot(overrides?: CallOverrides): Promise<[BigNumber]>;

    purgePlayer(
      _other: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    raise(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetGame(
      _params: PromiseOrValue<BytesLike>,
      _numPlayers: PromiseOrValue<BigNumberish>,
      _tableFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGameInstance(
      _gameInstance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    showdown(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shuffleDeck(
      _shuffledDeck: PromiseOrValue<BytesLike>[],
      _shuffleProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    smallBlindBet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tableFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    whoRaised(overrides?: CallOverrides): Promise<[string]>;

    whoShowed(overrides?: CallOverrides): Promise<[string]>;

    winner(overrides?: CallOverrides): Promise<[string]>;
  };

  BIG_BLIND(overrides?: CallOverrides): Promise<BigNumber>;

  COMMISSION(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MIN_RAISE(overrides?: CallOverrides): Promise<BigNumber>;

  SMALL_BLIND(overrides?: CallOverrides): Promise<BigNumber>;

  TIMEOUT_ACT(overrides?: CallOverrides): Promise<BigNumber>;

  bigBlindBet(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  button(overrides?: CallOverrides): Promise<BigNumber>;

  calls(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  check(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  drawCards(
    _revealTokens: PromiseOrValue<BytesLike>[],
    _revealProofs: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flipCards(
    _revealTokens: PromiseOrValue<BytesLike>[],
    _revealProofs: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fold(
    _revealTokens: PromiseOrValue<BytesLike>[],
    _revealProofs: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  game(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinGame(
    _pubKey: PromiseOrValue<BytesLike>,
    _memo: PromiseOrValue<BytesLike>,
    _keyProof: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pickButton(
    _randFeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  player2Act(overrides?: CallOverrides): Promise<string>;

  playerBet(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playerBets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playerDone(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playerRemain(overrides?: CallOverrides): Promise<BigNumber>;

  players(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pot(overrides?: CallOverrides): Promise<BigNumber>;

  purgePlayer(
    _other: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  raise(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetGame(
    _params: PromiseOrValue<BytesLike>,
    _numPlayers: PromiseOrValue<BigNumberish>,
    _tableFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGameInstance(
    _gameInstance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  showdown(
    _revealTokens: PromiseOrValue<BytesLike>[],
    _revealProofs: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shuffleDeck(
    _shuffledDeck: PromiseOrValue<BytesLike>[],
    _shuffleProof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  smallBlindBet(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tableFee(overrides?: CallOverrides): Promise<BigNumber>;

  whoRaised(overrides?: CallOverrides): Promise<string>;

  whoShowed(overrides?: CallOverrides): Promise<string>;

  winner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BIG_BLIND(overrides?: CallOverrides): Promise<BigNumber>;

    COMMISSION(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MIN_RAISE(overrides?: CallOverrides): Promise<BigNumber>;

    SMALL_BLIND(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEOUT_ACT(overrides?: CallOverrides): Promise<BigNumber>;

    bigBlindBet(overrides?: CallOverrides): Promise<void>;

    button(overrides?: CallOverrides): Promise<BigNumber>;

    calls(overrides?: CallOverrides): Promise<void>;

    check(overrides?: CallOverrides): Promise<void>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    drawCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    flipCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    fold(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    game(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinGame(
      _pubKey: PromiseOrValue<BytesLike>,
      _memo: PromiseOrValue<BytesLike>,
      _keyProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    leaveGame(overrides?: CallOverrides): Promise<void>;

    pickButton(
      _randFeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    player2Act(overrides?: CallOverrides): Promise<string>;

    playerBet(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerDone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playerRemain(overrides?: CallOverrides): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    purgePlayer(
      _other: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    raise(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetGame(
      _params: PromiseOrValue<BytesLike>,
      _numPlayers: PromiseOrValue<BigNumberish>,
      _tableFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameInstance(
      _gameInstance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    showdown(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    shuffleDeck(
      _shuffledDeck: PromiseOrValue<BytesLike>[],
      _shuffleProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    smallBlindBet(overrides?: CallOverrides): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tableFee(overrides?: CallOverrides): Promise<BigNumber>;

    whoRaised(overrides?: CallOverrides): Promise<string>;

    whoShowed(overrides?: CallOverrides): Promise<string>;

    winner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BetBigBlind(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): BetBigBlindEventFilter;
    BetBigBlind(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): BetBigBlindEventFilter;

    "BetSmallBlind(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): BetSmallBlindEventFilter;
    BetSmallBlind(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): BetSmallBlindEventFilter;

    "ButtonPicked(address)"(
      player?: PromiseOrValue<string> | null
    ): ButtonPickedEventFilter;
    ButtonPicked(
      player?: PromiseOrValue<string> | null
    ): ButtonPickedEventFilter;

    "GameEnded(address,uint256)"(
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): GameEndedEventFilter;
    GameEnded(
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): GameEndedEventFilter;

    "GameTimeout(address,uint256)"(
      blame?: PromiseOrValue<string> | null,
      fine?: null
    ): GameTimeoutEventFilter;
    GameTimeout(
      blame?: PromiseOrValue<string> | null,
      fine?: null
    ): GameTimeoutEventFilter;

    "PlayerCalled(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerCalledEventFilter;
    PlayerCalled(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerCalledEventFilter;

    "PlayerChecked(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerCheckedEventFilter;
    PlayerChecked(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerCheckedEventFilter;

    "PlayerFolded(address)"(
      player?: PromiseOrValue<string> | null
    ): PlayerFoldedEventFilter;
    PlayerFolded(
      player?: PromiseOrValue<string> | null
    ): PlayerFoldedEventFilter;

    "PlayerRaised(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerRaisedEventFilter;
    PlayerRaised(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerRaisedEventFilter;

    "PlayerShowed(address,uint256[])"(
      player?: PromiseOrValue<string> | null,
      cards?: null
    ): PlayerShowedEventFilter;
    PlayerShowed(
      player?: PromiseOrValue<string> | null,
      cards?: null
    ): PlayerShowedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    BIG_BLIND(overrides?: CallOverrides): Promise<BigNumber>;

    COMMISSION(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_RAISE(overrides?: CallOverrides): Promise<BigNumber>;

    SMALL_BLIND(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEOUT_ACT(overrides?: CallOverrides): Promise<BigNumber>;

    bigBlindBet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    button(overrides?: CallOverrides): Promise<BigNumber>;

    calls(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    check(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    drawCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flipCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fold(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    game(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinGame(
      _pubKey: PromiseOrValue<BytesLike>,
      _memo: PromiseOrValue<BytesLike>,
      _keyProof: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pickButton(
      _randFeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    player2Act(overrides?: CallOverrides): Promise<BigNumber>;

    playerBet(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerDone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerRemain(overrides?: CallOverrides): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    purgePlayer(
      _other: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    raise(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetGame(
      _params: PromiseOrValue<BytesLike>,
      _numPlayers: PromiseOrValue<BigNumberish>,
      _tableFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGameInstance(
      _gameInstance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    showdown(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shuffleDeck(
      _shuffledDeck: PromiseOrValue<BytesLike>[],
      _shuffleProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    smallBlindBet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tableFee(overrides?: CallOverrides): Promise<BigNumber>;

    whoRaised(overrides?: CallOverrides): Promise<BigNumber>;

    whoShowed(overrides?: CallOverrides): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BIG_BLIND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COMMISSION(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_RAISE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SMALL_BLIND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIMEOUT_ACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bigBlindBet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    button(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calls(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    check(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flipCards(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fold(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    game(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinGame(
      _pubKey: PromiseOrValue<BytesLike>,
      _memo: PromiseOrValue<BytesLike>,
      _keyProof: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pickButton(
      _randFeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    player2Act(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerBet(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerDone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerRemain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purgePlayer(
      _other: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    raise(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetGame(
      _params: PromiseOrValue<BytesLike>,
      _numPlayers: PromiseOrValue<BigNumberish>,
      _tableFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGameInstance(
      _gameInstance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    showdown(
      _revealTokens: PromiseOrValue<BytesLike>[],
      _revealProofs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shuffleDeck(
      _shuffledDeck: PromiseOrValue<BytesLike>[],
      _shuffleProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    smallBlindBet(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tableFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whoRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whoShowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
