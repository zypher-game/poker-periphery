/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPokerTable {
  export type PokerCardStruct = {
    suit: PromiseOrValue<BigNumberish>;
    rank: PromiseOrValue<BigNumberish>;
  };

  export type PokerCardStructOutput = [number, number] & {
    suit: number;
    rank: number;
  };

  export type PlayerStruct = {
    wallet: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
  };

  export type PlayerStructOutput = [string, string] & {
    wallet: string;
    name: string;
  };

  export type InfoStruct = {
    subject: PromiseOrValue<string>;
    lobby: PromiseOrValue<string>;
    gameType: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    seats: PromiseOrValue<BigNumberish>;
    initialBuyin: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [
    string,
    string,
    number,
    number,
    number,
    BigNumber
  ] & {
    subject: string;
    lobby: string;
    gameType: number;
    status: number;
    seats: number;
    initialBuyin: BigNumber;
  };

  export type PositionStruct = {
    pid: PromiseOrValue<BigNumberish>;
    player: IPokerTable.PlayerStruct;
    wins: PromiseOrValue<BigNumberish>;
    draws: PromiseOrValue<BigNumberish>;
    bets: PromiseOrValue<BigNumberish>;
    chips: PromiseOrValue<BigNumberish>;
    pendingBuyin: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [
    number,
    IPokerTable.PlayerStructOutput,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    pid: number;
    player: IPokerTable.PlayerStructOutput;
    wins: number;
    draws: number;
    bets: BigNumber;
    chips: BigNumber;
    pendingBuyin: BigNumber;
  };
}

export declare namespace ITexasHoldemTable {
  export type TexasHoldemPositionStruct = {
    pid: PromiseOrValue<BigNumberish>;
    player: IPokerTable.PlayerStruct;
    status: PromiseOrValue<BigNumberish>;
    bets: PromiseOrValue<BigNumberish>;
    chips: PromiseOrValue<BigNumberish>;
    pendingBuyin: PromiseOrValue<BigNumberish>;
    holeCards: IPokerTable.PokerCardStruct[];
    wins: PromiseOrValue<BigNumberish>;
    draws: PromiseOrValue<BigNumberish>;
  };

  export type TexasHoldemPositionStructOutput = [
    number,
    IPokerTable.PlayerStructOutput,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    IPokerTable.PokerCardStructOutput[],
    number,
    number
  ] & {
    pid: number;
    player: IPokerTable.PlayerStructOutput;
    status: number;
    bets: BigNumber;
    chips: BigNumber;
    pendingBuyin: BigNumber;
    holeCards: IPokerTable.PokerCardStructOutput[];
    wins: number;
    draws: number;
  };

  export type TexasHoldemGameStruct = {
    id: PromiseOrValue<BigNumberish>;
    subject: PromiseOrValue<string>;
    stage: PromiseOrValue<BigNumberish>;
    communityCards: IPokerTable.PokerCardStruct[];
    positions: ITexasHoldemTable.TexasHoldemPositionStruct[];
    pot: PromiseOrValue<BigNumberish>;
    minRaise: PromiseOrValue<BigNumberish>;
    betAmount: PromiseOrValue<BigNumberish>;
    actingPosition: PromiseOrValue<BigNumberish>;
    actingTimeout: PromiseOrValue<BigNumberish>;
  };

  export type TexasHoldemGameStructOutput = [
    BigNumber,
    string,
    number,
    IPokerTable.PokerCardStructOutput[],
    ITexasHoldemTable.TexasHoldemPositionStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    id: BigNumber;
    subject: string;
    stage: number;
    communityCards: IPokerTable.PokerCardStructOutput[];
    positions: ITexasHoldemTable.TexasHoldemPositionStructOutput[];
    pot: BigNumber;
    minRaise: BigNumber;
    betAmount: BigNumber;
    actingPosition: number;
    actingTimeout: number;
  };
}

export interface ITexasHoldemTableInterface extends utils.Interface {
  functions: {
    "game(bytes)": FunctionFragment;
    "info()": FunctionFragment;
    "isPlaying()": FunctionFragment;
    "newTable((address,string)[])": FunctionFragment;
    "positions()": FunctionFragment;
    "setup(string,uint8,uint256,uint256,uint256,uint256,address,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "game"
      | "info"
      | "isPlaying"
      | "newTable"
      | "positions"
      | "setup"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "game",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPlaying", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newTable",
    values: [IPokerTable.PlayerStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "positions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPlaying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;

  events: {};
}

export interface ITexasHoldemTable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITexasHoldemTableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITexasHoldemTable.TexasHoldemGameStructOutput] & {
        currentGame: ITexasHoldemTable.TexasHoldemGameStructOutput;
      }
    >;

    info(overrides?: CallOverrides): Promise<[IPokerTable.InfoStructOutput]>;

    isPlaying(overrides?: CallOverrides): Promise<[boolean]>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positions(
      overrides?: CallOverrides
    ): Promise<[IPokerTable.PositionStructOutput[]]>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  game(
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITexasHoldemTable.TexasHoldemGameStructOutput>;

  info(overrides?: CallOverrides): Promise<IPokerTable.InfoStructOutput>;

  isPlaying(overrides?: CallOverrides): Promise<boolean>;

  newTable(
    players: IPokerTable.PlayerStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positions(
    overrides?: CallOverrides
  ): Promise<IPokerTable.PositionStructOutput[]>;

  setup(
    subject: PromiseOrValue<string>,
    seats: PromiseOrValue<BigNumberish>,
    bbAmount: PromiseOrValue<BigNumberish>,
    sbAmount: PromiseOrValue<BigNumberish>,
    anteAmount: PromiseOrValue<BigNumberish>,
    initialBuyin: PromiseOrValue<BigNumberish>,
    helper: PromiseOrValue<string>,
    cardIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITexasHoldemTable.TexasHoldemGameStructOutput>;

    info(overrides?: CallOverrides): Promise<IPokerTable.InfoStructOutput>;

    isPlaying(overrides?: CallOverrides): Promise<boolean>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    positions(
      overrides?: CallOverrides
    ): Promise<IPokerTable.PositionStructOutput[]>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    isPlaying(overrides?: CallOverrides): Promise<BigNumber>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positions(overrides?: CallOverrides): Promise<BigNumber>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    game(
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPlaying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newTable(
      players: IPokerTable.PlayerStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setup(
      subject: PromiseOrValue<string>,
      seats: PromiseOrValue<BigNumberish>,
      bbAmount: PromiseOrValue<BigNumberish>,
      sbAmount: PromiseOrValue<BigNumberish>,
      anteAmount: PromiseOrValue<BigNumberish>,
      initialBuyin: PromiseOrValue<BigNumberish>,
      helper: PromiseOrValue<string>,
      cardIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
